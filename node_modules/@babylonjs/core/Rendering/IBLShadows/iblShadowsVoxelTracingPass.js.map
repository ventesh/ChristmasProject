{"version":3,"file":"iblShadowsVoxelTracingPass.js","sourceRoot":"","sources":["../../../../../dev/core/src/Rendering/IBLShadows/iblShadowsVoxelTracingPass.ts"],"names":[],"mappings":"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","sourcesContent":["import { Constants } from \"../../Engines/constants\";\r\nimport type { AbstractEngine } from \"../../Engines/abstractEngine\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, Vector2, Vector4 } from \"../../Maths/math.vector\";\r\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\r\nimport type { PostProcessOptions } from \"../../PostProcesses/postProcess\";\r\nimport type { IblShadowsRenderPipeline } from \"./iblShadowsRenderPipeline\";\r\nimport type { Effect } from \"../../Materials/effect\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport { ShaderLanguage } from \"core/Materials/shaderLanguage\";\r\n\r\n/**\r\n * Build cdf maps for IBL importance sampling during IBL shadow computation.\r\n * This should not be instanciated directly, as it is part of a scene component\r\n * @internal\r\n */\r\nexport class _IblShadowsVoxelTracingPass {\r\n    private _scene: Scene;\r\n    private _engine: AbstractEngine;\r\n    private _renderPipeline: IblShadowsRenderPipeline;\r\n    private _voxelShadowOpacity: number = 1.0;\r\n    /**\r\n     * The opacity of the shadow cast from the voxel grid\r\n     */\r\n    public get voxelShadowOpacity(): number {\r\n        return this._voxelShadowOpacity;\r\n    }\r\n    /**\r\n     * The opacity of the shadow cast from the voxel grid\r\n     */\r\n    public set voxelShadowOpacity(value: number) {\r\n        this._voxelShadowOpacity = value;\r\n    }\r\n    private _sssSamples: number = 16;\r\n    private _sssStride: number = 8;\r\n    private _sssMaxDist: number = 0.05;\r\n    private _sssThickness: number = 0.5;\r\n\r\n    private _ssShadowOpacity: number = 1.0;\r\n    /**\r\n     * The opacity of the screen-space shadow\r\n     */\r\n    public get ssShadowOpacity(): number {\r\n        return this._ssShadowOpacity;\r\n    }\r\n    /**\r\n     * The opacity of the screen-space shadow\r\n     */\r\n    public set ssShadowOpacity(value: number) {\r\n        this._ssShadowOpacity = value;\r\n    }\r\n\r\n    /**\r\n     * The number of samples used in the screen space shadow pass.\r\n     */\r\n    public get sssSamples(): number {\r\n        return this._sssSamples;\r\n    }\r\n\r\n    /**\r\n     * The number of samples used in the screen space shadow pass.\r\n     */\r\n    public set sssSamples(value: number) {\r\n        this._sssSamples = value;\r\n    }\r\n\r\n    /**\r\n     * The stride used in the screen space shadow pass. This controls the distance between samples.\r\n     */\r\n    public get sssStride(): number {\r\n        return this._sssStride;\r\n    }\r\n\r\n    /**\r\n     * The stride used in the screen space shadow pass. This controls the distance between samples.\r\n     */\r\n    public set sssStride(value: number) {\r\n        this._sssStride = value;\r\n    }\r\n\r\n    /**\r\n     * The maximum distance that the screen-space shadow will be able to occlude.\r\n     */\r\n    public get sssMaxDist(): number {\r\n        return this._sssMaxDist;\r\n    }\r\n\r\n    /**\r\n     * The maximum distance that the screen-space shadow will be able to occlude.\r\n     */\r\n    public set sssMaxDist(value: number) {\r\n        this._sssMaxDist = value;\r\n    }\r\n\r\n    /**\r\n     * The thickness of the screen-space shadow\r\n     */\r\n    public get sssThickness(): number {\r\n        return this._sssThickness;\r\n    }\r\n\r\n    /**\r\n     * The thickness of the screen-space shadow\r\n     */\r\n    public set sssThickness(value: number) {\r\n        this._sssThickness = value;\r\n    }\r\n\r\n    private _outputPP: PostProcess;\r\n    private _cameraInvView: Matrix = Matrix.Identity();\r\n    private _cameraInvProj: Matrix = Matrix.Identity();\r\n    private _invWorldScaleMatrix: Matrix = Matrix.Identity();\r\n    private _frameId: number = 0;\r\n    private _sampleDirections: number = 4;\r\n\r\n    /**\r\n     * The number of directions to sample for the voxel tracing.\r\n     */\r\n    public get sampleDirections(): number {\r\n        return this._sampleDirections;\r\n    }\r\n\r\n    /**\r\n     * The number of directions to sample for the voxel tracing.\r\n     */\r\n    public set sampleDirections(value: number) {\r\n        this._sampleDirections = value;\r\n    }\r\n\r\n    /**\r\n     * The current rotation of the environment map, in radians.\r\n     */\r\n    public get envRotation(): number {\r\n        return this._envRotation;\r\n    }\r\n\r\n    /**\r\n     * The current rotation of the environment map, in radians.\r\n     */\r\n    public set envRotation(value: number) {\r\n        this._envRotation = value;\r\n    }\r\n\r\n    /** Enable the debug view for this pass */\r\n    public debugEnabled: boolean = false;\r\n\r\n    /**\r\n     * Gets the pass post process\r\n     * @returns The post process\r\n     */\r\n    public getPassPP(): PostProcess {\r\n        return this._outputPP;\r\n    }\r\n\r\n    /**\r\n     * Gets the debug pass post process. This will create the resources for the pass\r\n     * if they don't already exist.\r\n     * @returns The post process\r\n     */\r\n    public getDebugPassPP(): PostProcess {\r\n        if (!this._debugPassPP) {\r\n            this._createDebugPass();\r\n        }\r\n        return this._debugPassPP;\r\n    }\r\n\r\n    private _debugPassName: string = \"Voxel Tracing Debug Pass\";\r\n\r\n    /**\r\n     * The name of the debug pass\r\n     */\r\n    public get debugPassName(): string {\r\n        return this._debugPassName;\r\n    }\r\n\r\n    /** The default rotation of the environment map will align the shadows with the default lighting orientation */\r\n    private _envRotation: number = 0.0;\r\n    private _downscale: number = 1.0;\r\n\r\n    /**\r\n     * Set the matrix to use for scaling the world space to voxel space\r\n     * @param matrix The matrix to use for scaling the world space to voxel space\r\n     */\r\n    public setWorldScaleMatrix(matrix: Matrix) {\r\n        this._invWorldScaleMatrix = matrix;\r\n    }\r\n\r\n    private _debugVoxelMarchEnabled: boolean = false;\r\n    private _debugPassPP: PostProcess;\r\n    private _debugSizeParams: Vector4 = new Vector4(0.0, 0.0, 0.0, 0.0);\r\n\r\n    /**\r\n     * Sets params that control the position and scaling of the debug display on the screen.\r\n     * @param x Screen X offset of the debug display (0-1)\r\n     * @param y Screen Y offset of the debug display (0-1)\r\n     * @param widthScale X scale of the debug display (0-1)\r\n     * @param heightScale Y scale of the debug display (0-1)\r\n     */\r\n    public setDebugDisplayParams(x: number, y: number, widthScale: number, heightScale: number) {\r\n        this._debugSizeParams.set(x, y, widthScale, heightScale);\r\n    }\r\n\r\n    /**\r\n     * Creates the debug post process effect for this pass\r\n     */\r\n    private _createDebugPass() {\r\n        const isWebGPU = this._engine.isWebGPU;\r\n        if (!this._debugPassPP) {\r\n            const debugOptions: PostProcessOptions = {\r\n                width: this._engine.getRenderWidth(),\r\n                height: this._engine.getRenderHeight(),\r\n                uniforms: [\"sizeParams\"],\r\n                samplers: [\"debugSampler\"],\r\n                engine: this._engine,\r\n                reusable: false,\r\n                shaderLanguage: isWebGPU ? ShaderLanguage.WGSL : ShaderLanguage.GLSL,\r\n                extraInitializations: (useWebGPU: boolean, list: Promise<any>[]) => {\r\n                    if (useWebGPU) {\r\n                        list.push(import(\"../../ShadersWGSL/iblShadowDebug.fragment\"));\r\n                    } else {\r\n                        list.push(import(\"../../Shaders/iblShadowDebug.fragment\"));\r\n                    }\r\n                },\r\n            };\r\n            this._debugPassPP = new PostProcess(this.debugPassName, \"iblShadowDebug\", debugOptions);\r\n            this._debugPassPP.autoClear = false;\r\n            this._debugPassPP.onApplyObservable.add((effect) => {\r\n                // update the caustic texture with what we just rendered.\r\n                effect.setTextureFromPostProcessOutput(\"debugSampler\", this._outputPP);\r\n                effect.setVector4(\"sizeParams\", this._debugSizeParams);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates the shadow voxel-tracing pass\r\n     * @param scene Scene to attach to\r\n     * @param iblShadowsRenderPipeline The IBL shadows render pipeline\r\n     * @returns The shadow voxel-tracing pass\r\n     */\r\n    constructor(scene: Scene, iblShadowsRenderPipeline: IblShadowsRenderPipeline) {\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n        this._renderPipeline = iblShadowsRenderPipeline;\r\n        this._createTextures();\r\n    }\r\n\r\n    private _createTextures() {\r\n        let defines = \"\";\r\n        if (this._scene.useRightHandedSystem) {\r\n            defines += \"#define RIGHT_HANDED\\n\";\r\n        }\r\n        if (this._debugVoxelMarchEnabled) {\r\n            defines += \"#define VOXEL_MARCH_DIAGNOSTIC_INFO_OPTION 1u\\n\";\r\n        }\r\n        const isWebGPU = this._engine.isWebGPU;\r\n        const ppOptions: PostProcessOptions = {\r\n            width: this._engine.getRenderWidth(),\r\n            height: this._engine.getRenderHeight(),\r\n            textureFormat: Constants.TEXTUREFORMAT_RG,\r\n            textureType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n            uniforms: [\"viewMtx\", \"projMtx\", \"invProjMtx\", \"invViewMtx\", \"wsNormalizationMtx\", \"shadowParameters\", \"offsetDataParameters\", \"sssParameters\", \"shadowOpacity\"],\r\n            samplers: [\"voxelGridSampler\", \"icdfySampler\", \"icdfxSampler\", \"blueNoiseSampler\", \"worldNormalSampler\", \"depthSampler\", \"worldPositionSampler\"],\r\n            defines: defines,\r\n            engine: this._engine,\r\n            reusable: false,\r\n            shaderLanguage: isWebGPU ? ShaderLanguage.WGSL : ShaderLanguage.GLSL,\r\n            extraInitializations: (useWebGPU: boolean, list: Promise<any>[]) => {\r\n                if (useWebGPU) {\r\n                    list.push(import(\"../../ShadersWGSL/iblShadowVoxelTracing.fragment\"));\r\n                } else {\r\n                    list.push(import(\"../../Shaders/iblShadowVoxelTracing.fragment\"));\r\n                }\r\n            },\r\n        };\r\n        this._outputPP = new PostProcess(\"voxelTracingPass\", \"iblShadowVoxelTracing\", ppOptions);\r\n        this._outputPP.autoClear = false;\r\n        this._outputPP.onApplyObservable.add((effect) => {\r\n            this._updatePostProcess(effect, this._scene.activeCamera!);\r\n        });\r\n    }\r\n\r\n    private _updatePostProcess(effect: Effect, camera: Camera) {\r\n        if (this._scene.useRightHandedSystem) {\r\n            effect.defines = \"#define RIGHT_HANDED\\n\";\r\n        }\r\n        effect.setMatrix(\"viewMtx\", camera.getViewMatrix());\r\n        effect.setMatrix(\"projMtx\", camera.getProjectionMatrix());\r\n        camera.getProjectionMatrix().invertToRef(this._cameraInvProj);\r\n        camera.getViewMatrix().invertToRef(this._cameraInvView);\r\n        effect.setMatrix(\"invProjMtx\", this._cameraInvProj);\r\n        effect.setMatrix(\"invViewMtx\", this._cameraInvView);\r\n        effect.setMatrix(\"wsNormalizationMtx\", this._invWorldScaleMatrix);\r\n\r\n        this._frameId++;\r\n\r\n        const downscaleSquared = this._downscale * this._downscale;\r\n        let rotation = this._scene.useRightHandedSystem ? -(this._envRotation + 0.5 * Math.PI) : this._envRotation - 0.5 * Math.PI;\r\n        rotation = rotation % (2.0 * Math.PI);\r\n        effect.setVector4(\"shadowParameters\", new Vector4(this._sampleDirections, this._frameId / downscaleSquared, this._downscale, rotation));\r\n        const offset = new Vector2(0.0, 0.0);\r\n        const voxelGrid = this._renderPipeline!.getVoxelGridTexture();\r\n        const highestMip = Math.floor(Math.log2(voxelGrid!.getSize().width));\r\n        effect.setVector4(\"offsetDataParameters\", new Vector4(offset.x, offset.y, highestMip, 0.0));\r\n\r\n        // SSS Options.\r\n        effect.setVector4(\"sssParameters\", new Vector4(this._sssSamples, this._sssStride, this._sssMaxDist, this._sssThickness));\r\n        effect.setVector4(\"shadowOpacity\", new Vector4(this._voxelShadowOpacity, this._ssShadowOpacity, 0.0, 0.0));\r\n        effect.setTexture(\"voxelGridSampler\", voxelGrid);\r\n        effect.setTexture(\"blueNoiseSampler\", (this._renderPipeline as any)._noiseTexture);\r\n        effect.setTexture(\"icdfySampler\", this._renderPipeline!.getIcdfyTexture());\r\n        effect.setTexture(\"icdfxSampler\", this._renderPipeline!.getIcdfxTexture());\r\n        if (this._debugVoxelMarchEnabled) {\r\n            effect.defines += \"#define VOXEL_MARCH_DIAGNOSTIC_INFO_OPTION 1u\\n\";\r\n        }\r\n\r\n        const prePassRenderer = this._scene.prePassRenderer;\r\n        if (prePassRenderer) {\r\n            const wnormalIndex = prePassRenderer.getIndex(Constants.PREPASS_WORLD_NORMAL_TEXTURE_TYPE);\r\n            const clipDepthIndex = prePassRenderer.getIndex(Constants.PREPASS_SCREENSPACE_DEPTH_TEXTURE_TYPE);\r\n            const wPositionIndex = prePassRenderer.getIndex(Constants.PREPASS_POSITION_TEXTURE_TYPE);\r\n            if (wnormalIndex >= 0) effect.setTexture(\"worldNormalSampler\", prePassRenderer.getRenderTarget().textures[wnormalIndex]);\r\n            if (clipDepthIndex >= 0) effect.setTexture(\"depthSampler\", prePassRenderer.getRenderTarget().textures[clipDepthIndex]);\r\n            if (wPositionIndex >= 0) effect.setTexture(\"worldPositionSampler\", prePassRenderer.getRenderTarget().textures[wPositionIndex]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the pass is ready\r\n     * @returns true if the pass is ready\r\n     */\r\n    public isReady() {\r\n        return (\r\n            this._outputPP.isReady() &&\r\n            !(this._debugPassPP && !this._debugPassPP.isReady()) &&\r\n            this._renderPipeline!.getIcdfyTexture().isReady() &&\r\n            this._renderPipeline!.getIcdfxTexture().isReady() &&\r\n            this._renderPipeline!.getVoxelGridTexture().isReady()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Disposes the associated resources\r\n     */\r\n    public dispose() {\r\n        this._outputPP.dispose();\r\n        if (this._debugPassPP) {\r\n            this._debugPassPP.dispose();\r\n        }\r\n    }\r\n}\r\n"]}
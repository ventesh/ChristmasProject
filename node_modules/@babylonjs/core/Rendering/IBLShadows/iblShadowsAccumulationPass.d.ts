import type { Scene } from "../../scene";
import { PostProcess } from "../../PostProcesses/postProcess";
import type { Effect } from "../../Materials/effect";
/**
 * This should not be instanciated directly, as it is part of a scene component
 * @internal
 */
export declare class _IblShadowsAccumulationPass {
    private _scene;
    private _engine;
    private _outputPP;
    private _oldAccumulationRT;
    private _oldLocalPositionRT;
    /** Enable the debug view for this pass */
    debugEnabled: boolean;
    /**
     * Gets the pass post process
     * @returns The post process
     */
    getPassPP(): PostProcess;
    /**
     * Gets the debug pass post process
     * @returns The post process
     */
    getDebugPassPP(): PostProcess;
    private _debugPassName;
    /**
     * Gets the name of the debug pass
     * @returns The name of the debug pass
     */
    get debugPassName(): string;
    /**
     * A value that controls how much of the previous frame's accumulation to keep.
     * The higher the value, the faster the shadows accumulate but the more potential ghosting you'll see.
     */
    get remenance(): number;
    /**
     * A value that controls how much of the previous frame's accumulation to keep.
     * The higher the value, the faster the shadows accumulate but the more potential ghosting you'll see.
     */
    set remenance(value: number);
    private _remenance;
    /**
     * Reset the accumulation.
     */
    get reset(): boolean;
    /**
     * Reset the accumulation.
     */
    set reset(value: boolean);
    private _reset;
    private _debugPassPP;
    private _debugSizeParams;
    /**
     * Sets params that control the position and scaling of the debug display on the screen.
     * @param x Screen X offset of the debug display (0-1)
     * @param y Screen Y offset of the debug display (0-1)
     * @param widthScale X scale of the debug display (0-1)
     * @param heightScale Y scale of the debug display (0-1)
     */
    setDebugDisplayParams(x: number, y: number, widthScale: number, heightScale: number): void;
    /**
     * Creates the debug post process effect for this pass
     */
    private _createDebugPass;
    /**
     * Instantiates the accumulation pass
     * @param scene Scene to attach to
     * @returns The accumulation pass
     */
    constructor(scene: Scene);
    private _createTextures;
    _updatePostProcess(effect: Effect): void;
    /** Called by render pipeline when canvas resized. */
    resize(): void;
    private _disposeTextures;
    /**
     * Checks if the pass is ready
     * @returns true if the pass is ready
     */
    isReady(): boolean;
    /**
     * Disposes the associated resources
     */
    dispose(): void;
}

{"version":3,"file":"iblShadowsRenderPipeline.js","sourceRoot":"","sources":["../../../../../dev/core/src/Rendering/IBLShadows/iblShadowsRenderPipeline.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AAExD,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAC;AAC/E,OAAO,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAC;AAGzC,OAAO,EAAE,OAAO,EAAE,MAAM,kCAAkC,CAAC;AAE3D,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AACrD,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAC3C,OAAO,EAAE,wBAAwB,EAAE,MAAM,2BAA2B,CAAC;AACrE,OAAO,EAAE,2BAA2B,EAAE,MAAM,8BAA8B,CAAC;AAE3E,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAE9D,OAAO,EAAE,qCAAqC,EAAE,MAAM,wCAAwC,CAAC;AAC/F,OAAO,EAAE,0BAA0B,EAAE,MAAM,6BAA6B,CAAC;AACzE,OAAO,EAAE,2BAA2B,EAAE,MAAM,8BAA8B,CAAC;AAC3E,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAChE,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AACtD,OAAO,EAAE,yBAAyB,EAAE,MAAM,8DAA8D,CAAC;AACzG,OAAO,EAAE,uBAAuB,EAAE,sEAAkE;AAmEpG,MAAM,8BAA8B;IAApC;QACI;;WAEG;QACI,YAAO,GAAG,IAAI,CAAC;QAEtB;;WAEG;QACI,SAAI,GAAG,YAAY,CAAC;QAE3B;;WAEG;QACa,qBAAgB,GAAa;YACzC,SAAS,CAAC,0BAA0B;YACpC,SAAS,CAAC,sCAAsC;YAChD,SAAS,CAAC,iCAAiC;YAC3C,mFAAmF;YACnF,SAAS,CAAC,oCAAoC;YAC9C,oDAAoD;YACpD,SAAS,CAAC,6BAA6B;YACvC,SAAS,CAAC,mCAAmC;SAChD,CAAC;IACN,CAAC;CAAA;AAED;;;GAGG;AACH,MAAM,OAAO,wBAAyB,SAAQ,yBAAyB;IA+BnE;;OAEG;IACH,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,IAAW,aAAa,CAAC,KAAa;QAClC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,IAAW,kBAAkB;QACzB,OAAO,IAAI,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;IACtD,CAAC;IAED;;OAEG;IACH,IAAW,kBAAkB,CAAC,KAAa;QACvC,IAAI,CAAC,IAAI,CAAC,iBAAiB;YAAE,OAAO;QACpC,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,GAAG,KAAK,CAAC;IACtD,CAAC;IAED;;OAEG;IACH,IAAW,eAAe;QACtB,OAAO,IAAI,CAAC,iBAAiB,EAAE,eAAe,CAAC;IACnD,CAAC;IAED;;OAEG;IACH,IAAW,eAAe,CAAC,KAAa;QACpC,IAAI,CAAC,IAAI,CAAC,iBAAiB;YAAE,OAAO;QACpC,IAAI,CAAC,iBAAiB,CAAC,eAAe,GAAG,KAAK,CAAC;IACnD,CAAC;IAED;;OAEG;IACH,IAAW,eAAe;QACtB,OAAO,IAAI,CAAC,iBAAiB,EAAE,UAAU,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,IAAW,eAAe,CAAC,KAAa;QACpC,IAAI,CAAC,IAAI,CAAC,iBAAiB;YAAE,OAAO;QACpC,IAAI,CAAC,iBAAiB,CAAC,UAAU,GAAG,KAAK,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,IAAW,cAAc;QACrB,OAAO,IAAI,CAAC,iBAAiB,EAAE,SAAS,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,IAAW,cAAc,CAAC,KAAa;QACnC,IAAI,CAAC,IAAI,CAAC,iBAAiB;YAAE,OAAO;QACpC,IAAI,CAAC,iBAAiB,CAAC,SAAS,GAAG,KAAK,CAAC;IAC7C,CAAC;IAED;;;OAGG;IACH,IAAW,eAAe;QACtB,OAAO,IAAI,CAAC,iBAAiB,EAAE,UAAU,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACH,IAAW,eAAe,CAAC,KAAa;QACpC,IAAI,CAAC,IAAI,CAAC,iBAAiB;YAAE,OAAO;QACpC,IAAI,CAAC,iBAAiB,CAAC,UAAU,GAAG,KAAK,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,IAAW,iBAAiB;QACxB,OAAO,IAAI,CAAC,iBAAiB,EAAE,YAAY,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,IAAW,iBAAiB,CAAC,KAAa;QACtC,IAAI,CAAC,IAAI,CAAC,iBAAiB;YAAE,OAAO;QACpC,IAAI,CAAC,iBAAiB,CAAC,YAAY,GAAG,KAAK,CAAC;IAChD,CAAC;IAED;;;;OAIG;IACI,aAAa,CAAC,SAAsB;QACvC,IAAI,CAAC,IAAI,CAAC,2BAA2B;YAAE,OAAO;QAC9C,IAAI,CAAC,2BAA2B,CAAC,SAAS,GAAG,SAAS,CAAC;IAC3D,CAAC;IAED;;;OAGG;IACI,mBAAmB;QACtB,OAAO,IAAI,CAAC,cAAc,EAAE,YAAY,EAAE,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACI,eAAe;QAClB,OAAO,IAAI,CAAC,2BAA4B,CAAC,eAAe,EAAE,CAAC;IAC/D,CAAC;IAED;;;OAGG;IACI,eAAe;QAClB,OAAO,IAAI,CAAC,2BAA4B,CAAC,eAAe,EAAE,CAAC;IAC/D,CAAC;IAMD;;OAEG;IACH,IAAW,mBAAmB;QAC1B,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,IAAW,mBAAmB,CAAC,OAAgB;QAC3C,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACnC,MAAM,CAAC,IAAI,CAAC,4EAA4E,CAAC,CAAC;YAC1F,OAAO;SACV;QACD,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC;QACpC,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACtE;aAAM;YACH,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACvE;IACL,CAAC;IAED;;OAEG;IACH,IAAW,8BAA8B;QACrC,OAAO,IAAI,CAAC,2BAA2B,EAAE,YAAY,CAAC;IAC1D,CAAC;IAED;;OAEG;IACH,IAAW,8BAA8B,CAAC,OAAgB;QACtD,IAAI,CAAC,IAAI,CAAC,2BAA2B;YAAE,OAAO;QAC9C,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACnC,MAAM,CAAC,IAAI,CAAC,uFAAuF,CAAC,CAAC;YACrG,OAAO;SACV;QACD,IAAI,OAAO,KAAK,IAAI,CAAC,2BAA2B,CAAC,YAAY;YAAE,OAAO;QACtE,IAAI,CAAC,2BAA2B,CAAC,YAAY,GAAG,OAAO,CAAC;QACxD,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,2BAA2B,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACpF;aAAM;YACH,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,2BAA2B,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACrF;IACL,CAAC;IAED;;OAEG;IACH,IAAW,iBAAiB;QACxB,OAAO,IAAI,CAAC,cAAc,EAAE,iBAAiB,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,IAAW,iBAAiB,CAAC,OAAgB;QACzC,IAAI,CAAC,IAAI,CAAC,cAAc;YAAE,OAAO;QACjC,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACnC,MAAM,CAAC,IAAI,CAAC,yEAAyE,CAAC,CAAC;YACvF,OAAO;SACV;QACD,IAAI,CAAC,cAAc,CAAC,iBAAiB,GAAG,OAAO,CAAC;QAChD,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACvE;aAAM;YACH,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACxE;IACL,CAAC;IAED;;;OAGG;IACH,IAAW,cAAc;QACrB,OAAO,IAAI,CAAC,cAAc,EAAE,cAAc,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACH,IAAW,cAAc,CAAC,OAAe;QACrC,IAAI,CAAC,IAAI,CAAC,cAAc;YAAE,OAAO;QACjC,IAAI,CAAC,cAAc,CAAC,cAAc,GAAG,OAAO,CAAC;IACjD,CAAC;IAED;;OAEG;IACH,IAAW,oBAAoB,CAAC,MAAc;QAC1C,IAAI,CAAC,IAAI,CAAC,cAAc;YAAE,OAAO;QACjC,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,IAAW,wBAAwB;QAC/B,OAAO,IAAI,CAAC,iBAAiB,EAAE,YAAY,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,IAAW,wBAAwB,CAAC,OAAgB;QAChD,IAAI,CAAC,IAAI,CAAC,iBAAiB;YAAE,OAAO;QACpC,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACnC,MAAM,CAAC,IAAI,CAAC,iFAAiF,CAAC,CAAC;YAC/F,OAAO;SACV;QACD,IAAI,OAAO,KAAK,IAAI,CAAC,iBAAiB,CAAC,YAAY;YAAE,OAAO;QAC5D,IAAI,CAAC,iBAAiB,CAAC,YAAY,GAAG,OAAO,CAAC;QAC9C,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SAC1E;aAAM;YACH,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SAC3E;IACL,CAAC;IAED;;OAEG;IACH,IAAW,2BAA2B;QAClC,OAAO,IAAI,CAAC,gBAAgB,EAAE,YAAY,CAAC;IAC/C,CAAC;IAED;;OAEG;IACH,IAAW,2BAA2B,CAAC,OAAgB;QACnD,IAAI,CAAC,IAAI,CAAC,gBAAgB;YAAE,OAAO;QACnC,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACnC,MAAM,CAAC,IAAI,CAAC,gFAAgF,CAAC,CAAC;YAC9F,OAAO;SACV;QACD,IAAI,OAAO,KAAK,IAAI,CAAC,gBAAgB,CAAC,YAAY;YAAE,OAAO;QAC3D,IAAI,CAAC,gBAAgB,CAAC,YAAY,GAAG,OAAO,CAAC;QAC7C,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACzE;aAAM;YACH,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SAC1E;IACL,CAAC;IAED;;OAEG;IACH,IAAW,4BAA4B;QACnC,OAAO,IAAI,CAAC,iBAAiB,EAAE,YAAY,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,IAAW,4BAA4B,CAAC,OAAgB;QACpD,IAAI,CAAC,IAAI,CAAC,iBAAiB;YAAE,OAAO;QACpC,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACnC,MAAM,CAAC,IAAI,CAAC,qFAAqF,CAAC,CAAC;YACnG,OAAO;SACV;QACD,IAAI,OAAO,KAAK,IAAI,CAAC,iBAAiB,CAAC,YAAY;YAAE,OAAO;QAC5D,IAAI,CAAC,iBAAiB,CAAC,YAAY,GAAG,OAAO,CAAC;QAC9C,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SAC1E;aAAM;YACH,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SAC3E;IACL,CAAC;IAED;;;OAGG;IACI,eAAe,CAAC,IAAkB;QACrC,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;YACpD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC5C;IACL,CAAC;IAED;;;OAGG;IACI,kBAAkB,CAAC,IAAkB;QACxC,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;YACd,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SACzC;IACL,CAAC;IAED;;;;OAIG;IACH,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACH,IAAW,aAAa,CAAC,aAAqB;QAC1C,IAAI,aAAa,KAAK,IAAI,CAAC,cAAc,CAAC,kBAAkB;YAAE,OAAO;QACrE,IAAI,IAAI,CAAC,cAAc,CAAC,wBAAwB,EAAE,EAAE;YAChD,MAAM,CAAC,IAAI,CAAC,kFAAkF,CAAC,CAAC;YAChG,OAAO;SACV;QACD,IAAI,CAAC,cAAc,CAAC,kBAAkB,GAAG,aAAa,CAAC;QACvD,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,iBAAiB,CAAC,KAAK,GAAG,IAAI,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,IAAW,gBAAgB;QACvB,OAAO,IAAI,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;IACpD,CAAC;IAED;;OAEG;IACH,IAAW,gBAAgB,CAAC,KAAa;QACrC,IAAI,CAAC,IAAI,CAAC,iBAAiB;YAAE,OAAO;QACpC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,GAAG,KAAK,CAAC;IACpD,CAAC;IAED;;QAEI;IACJ,IAAW,eAAe;QACtB,OAAO,IAAI,CAAC,iBAAiB,EAAE,SAAS,CAAC;IAC7C,CAAC;IAED;;QAEI;IACJ,IAAW,eAAe,CAAC,KAAa;QACpC,IAAI,CAAC,IAAI,CAAC,iBAAiB;YAAE,OAAO;QACpC,IAAI,CAAC,iBAAiB,CAAC,SAAS,GAAG,KAAK,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,IAAW,WAAW;QAClB,OAAO,IAAI,CAAC,iBAAiB,EAAE,WAAW,CAAC;IAC/C,CAAC;IAED;;OAEG;IACH,IAAW,WAAW,CAAC,KAAa;QAChC,IAAI,CAAC,IAAI,CAAC,iBAAiB;YAAE,OAAO;QACpC,IAAI,CAAC,iBAAiB,CAAC,WAAW,GAAG,KAAK,CAAC;IAC/C,CAAC;IAED;;OAEG;IACH,IAAW,gBAAgB;QACvB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,IAAW,gBAAgB,CAAC,KAAc;QACtC,IAAI,IAAI,CAAC,iBAAiB,KAAK,KAAK;YAAE,OAAO;QAC7C,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAC/B,IAAI,KAAK,EAAE;YACP,IAAI,IAAI,CAAC,2BAA2B,CAAC,OAAO,EAAE,EAAE;gBAC5C,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC7B;iBAAM;gBACH,IAAI,CAAC,2BAA2B,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,EAAE;oBAC5D,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC9B,CAAC,CAAC,CAAC;aACN;SACJ;aAAM;YACH,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC9B;IACL,CAAC;IAED;;OAEG;IACI,MAAM,KAAK,WAAW;QACzB,MAAM,MAAM,GAAG,WAAW,CAAC,iBAAiB,CAAC;QAC7C,IAAI,CAAC,MAAM,EAAE;YACT,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACH,YAAY,IAAY,EAAE,KAAY,EAAE,UAAuC,EAAE,EAAE,OAAkB;QACjG,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;QA5d3B,uBAAkB,GAAY,IAAI,CAAC;QACnC,sBAAiB,GAAY,IAAI,CAAC;QAElC,sBAAiB,GAAY,KAAK,CAAC;QACnC,iBAAY,GAA8C,EAAE,CAAC;QAK7D,oBAAe,GAAa,EAAE,CAAC;QAQ/B,mBAAc,GAAW,IAAI,CAAC;QAC9B,aAAQ,GAAY,IAAI,CAAC;QAEjC;;WAEG;QACI,kBAAa,GAAW,GAAG,CAAC;QA+I3B,yBAAoB,GAAY,KAAK,CAAC;QACtC,4BAAuB,GAAY,IAAI,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAsTvE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,sCAAsC;QACtC,IAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE,EAAE;YAChC,MAAM,CAAC,IAAI,CAAC,iEAAiE,CAAC,CAAC;YAC/E,OAAO;SACV;QACD,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,IAAI,IAAI,CAAC;QACnD,IAAI,CAAC,2BAA2B,GAAG,IAAI,8BAA8B,EAAE,CAAC;QACxE,IAAI,CAAC,cAAc,GAAG,IAAI,wBAAwB,CAC9C,IAAI,CAAC,KAAK,EACV,IAAI,EACJ,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EACnC,OAAO,CAAC,qBAAqB,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CACrF,CAAC;QACF,IAAI,CAAC,2BAA2B,GAAG,IAAI,qCAAqC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzF,IAAI,CAAC,iBAAiB,GAAG,IAAI,2BAA2B,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC3E,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,IAAI,CAAC,CAAC;QACtD,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,IAAI,GAAG,CAAC;QAC5D,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,gBAAgB,KAAK,SAAS,IAAI,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QACtG,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,IAAI,IAAI,CAAC;QACvD,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,mBAAmB,IAAI,EAAE,CAAC;QACzD,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,IAAI,GAAG,CAAC;QAC1D,IAAI,CAAC,gBAAgB,GAAG,IAAI,0BAA0B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnE,IAAI,CAAC,iBAAiB,GAAG,IAAI,2BAA2B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrE,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,IAAI,IAAI,CAAC;QACvD,IAAI,CAAC,aAAa,GAAG,IAAI,OAAO,CAAC,qEAAqE,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,CAAC,4BAA4B,CAAC,CAAC;QACzK,IAAI,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE;YAC/B,IAAI,CAAC,2BAA2B,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;SAC9E;QAED,4DAA4D;QAC5D,IAAI,CAAC,+BAA+B,EAAE,CAAC;QAEvC,KAAK,CAAC,gCAAgC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAEzD,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3E,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1E,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9E,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAE7E,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAE7E,wEAAwE;QACxE,IAAI,CAAC,2BAA2B,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,EAAE;YAC5D,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAClC,MAAM,uBAAuB,GAAG,GAAG,EAAE;gBACjC,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,EAAE;oBAC/B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACjC,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACf,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;qBAClC;iBACJ;qBAAM;oBACH,UAAU,CAAC,GAAG,EAAE;wBACZ,uBAAuB,EAAE,CAAC;oBAC9B,CAAC,EAAE,EAAE,CAAC,CAAC;iBACV;YACL,CAAC,CAAC;YAEF,uBAAuB,EAAE,CAAC;QAC9B,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACI,YAAY,CAAC,OAAgB;QAChC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,aAAa,CAAC,2BAA2B,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAC9D,IAAI,CAAC,aAAa,CAAC,0BAA0B,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAC7D,IAAI,CAAC,aAAa,CAAC,+BAA+B,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAClE,IAAI,CAAC,aAAa,CAAC,wBAAwB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SAC9D;aAAM;YACH,IAAI,CAAC,cAAc,CAAC,2BAA2B,EAAE,IAAI,CAAC,CAAC;YACvD,IAAI,CAAC,cAAc,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC;YACtD,IAAI,CAAC,cAAc,CAAC,+BAA+B,EAAE,IAAI,CAAC,CAAC;YAC3D,IAAI,CAAC,cAAc,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;SACvD;IACL,CAAC;IAEO,aAAa;QACjB,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;QAC7B,IAAI,CAAC,iBAAiB,EAAE,MAAM,EAAE,CAAC;IACrC,CAAC;IAEO,+BAA+B;QACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QACtC,MAAM,gBAAgB,GAAuB;YACzC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,cAAc,EAAE;YAC9C,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,eAAe,EAAE;YAChD,QAAQ,EAAE,CAAC,eAAe,CAAC;YAC3B,QAAQ,EAAE,CAAC,cAAc,CAAC;YAC1B,YAAY,EAAE,SAAS,CAAC,6BAA6B;YACrD,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YAC9B,WAAW,EAAE,SAAS,CAAC,yBAAyB;YAChD,QAAQ,EAAE,KAAK;YACf,cAAc,EAAE,QAAQ,CAAC,CAAC,6BAAqB,CAAC,4BAAoB;YACpE,oBAAoB,EAAE,CAAC,SAAkB,EAAE,IAAoB,EAAE,EAAE;gBAC/D,IAAI,SAAS,EAAE;oBACX,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,8CAA8C,CAAC,CAAC,CAAC;iBACrE;qBAAM;oBACH,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,0CAA0C,CAAC,CAAC,CAAC;iBACjE;YACL,CAAC;SACJ,CAAC;QACF,IAAI,CAAC,kBAAkB,GAAG,IAAI,WAAW,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;QACtG,IAAI,CAAC,kBAAkB,CAAC,SAAS,GAAG,KAAK,CAAC;QAC1C,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YACrD,2GAA2G;YAC3G,MAAM,CAAC,yBAAyB,CAAC,cAAc,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC,CAAC;YACrF,MAAM,CAAC,QAAQ,CAAC,eAAe,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YACtD,IACI,IAAI,CAAC,2BAA2B,EAAE,OAAO,EAAE;gBAC3C,IAAI,CAAC,cAAc,EAAE,OAAO,EAAE;gBAC9B,IAAI,CAAC,iBAAiB,EAAE,OAAO,EAAE;gBACjC,IAAI,CAAC,gBAAgB,EAAE,OAAO,EAAE;gBAChC,IAAI,CAAC,iBAAiB,EAAE,OAAO,EAAE,EACnC;gBACE,IAAI,CAAC,MAAM,EAAE,CAAC;aACjB;QACL,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,kBAAkB,CAAC,2BAA2B,GAAG,IAAI,CAAC,2BAA2B,CAAC;IAC3F,CAAC;IAEO,mBAAmB,CAAC,OAA6B;QACrD,IAAI,CAAC,SAAS,CACV,IAAI,uBAAuB,CACvB,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,EACtB,2BAA2B,EAC3B,GAAG,EAAE;YACD,OAAO,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC;QAC9C,CAAC,EACD,IAAI,CACP,CACJ,CAAC;QACF,IAAI,CAAC,SAAS,CACV,IAAI,uBAAuB,CACvB,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,EACtB,0BAA0B,EAC1B,GAAG,EAAE;YACD,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC;QAC7C,CAAC,EACD,IAAI,CACP,CACJ,CAAC;QACF,IAAI,CAAC,SAAS,CACV,IAAI,uBAAuB,CACvB,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,EACtB,+BAA+B,EAC/B,GAAG,EAAE;YACD,OAAO,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC;QAC9C,CAAC,EACD,IAAI,CACP,CACJ,CAAC;QACF,IAAI,CAAC,SAAS,CACV,IAAI,uBAAuB,CACvB,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,EACtB,wBAAwB,EACxB,GAAG,EAAE;YACD,OAAO,IAAI,CAAC,kBAAkB,CAAC;QACnC,CAAC,EACD,IAAI,CACP,CACJ,CAAC;QAEF,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,KAAK,CAAC,gCAAgC,CAAC,6BAA6B,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SACjG;QAED,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACzB,CAAC;IAEO,oBAAoB;QACxB,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACxB,OAAO,IAAI,CAAC,iBAAiB,CAAC;SACjC;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QACtC,MAAM,YAAY,GAAa,IAAI,CAAC,2BAA2B,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAErJ,MAAM,OAAO,GAAuB;YAChC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,cAAc,EAAE;YAC9C,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,eAAe,EAAE;YAChD,YAAY,EAAE,SAAS,CAAC,4BAA4B;YACpD,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YAC9B,WAAW,EAAE,SAAS,CAAC,wBAAwB;YAC/C,aAAa,EAAE,SAAS,CAAC,kBAAkB;YAC3C,QAAQ,EAAE,CAAC,YAAY,CAAC;YACxB,QAAQ,EAAE,YAAY;YACtB,QAAQ,EAAE,KAAK;YACf,cAAc,EAAE,QAAQ,CAAC,CAAC,6BAAqB,CAAC,4BAAoB;YACpE,oBAAoB,EAAE,CAAC,SAAkB,EAAE,IAAoB,EAAE,EAAE;gBAC/D,IAAI,SAAS,EAAE;oBACX,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,kDAAkD,CAAC,CAAC,CAAC;iBACzE;qBAAM;oBACH,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,8CAA8C,CAAC,CAAC,CAAC;iBACrE;YACL,CAAC;SACJ,CAAC;QACF,IAAI,CAAC,iBAAiB,GAAG,IAAI,WAAW,CAAC,uBAAuB,EAAE,uBAAuB,EAAE,OAAO,CAAC,CAAC;QACpG,IAAI,CAAC,iBAAiB,CAAC,SAAS,GAAG,KAAK,CAAC;QACzC,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YACpD,IAAI,CAAC,2BAA2B,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC/D,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;gBACnD,IAAI,CAAC,eAAe,EAAE;oBAClB,MAAM,CAAC,KAAK,CAAC,4EAA4E,CAAC,CAAC;oBAC3F,OAAO;iBACV;gBACD,MAAM,KAAK,GAAG,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC7C,IAAI,KAAK,IAAI,CAAC;oBAAE,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,eAAe,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YACpI,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,UAAU,CAAC,YAAY,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;YAC9D,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;gBACzB,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;aAC7D;QACL,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAClC,CAAC;IAEO,kBAAkB;QACtB,IAAI,CAAC,YAAY,GAAG;YAChB,EAAE,IAAI,EAAE,IAAI,CAAC,2BAA2B,EAAE,cAAc,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,8BAA8B,EAAE;YAC1G,EAAE,IAAI,EAAE,IAAI,CAAC,cAAc,EAAE,cAAc,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,iBAAiB,EAAE;YAChF,EAAE,IAAI,EAAE,IAAI,CAAC,iBAAiB,EAAE,cAAc,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,wBAAwB,EAAE;YAC1F,EAAE,IAAI,EAAE,IAAI,CAAC,gBAAgB,EAAE,cAAc,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,2BAA2B,EAAE;YAC5F,EAAE,IAAI,EAAE,IAAI,CAAC,iBAAiB,EAAE,cAAc,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,4BAA4B,EAAE;YAC9F,EAAE,IAAI,EAAE,IAAI,CAAC,oBAAoB,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,mBAAmB,EAAE;SAC3E,CAAC;QACF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI;gBAAE,SAAS;YACzC,IAAI,CAAC,SAAS,CACV,IAAI,uBAAuB,CACvB,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,EACtB,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAC9B,GAAG,EAAE;gBACD,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACrC,CAAC,EACD,IAAI,CACP,CACJ,CAAC;SACL;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACrC,IAAI,CAAC,KAAK,CAAC,gCAAgC,CAAC,+BAA+B,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACrG,IAAI,CAAC,KAAK,CAAC,gCAAgC,CAAC,6BAA6B,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC9F,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI;gBAAE,SAAS;YACzC,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;gBAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;aACpE;iBAAM;gBACH,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;aACrE;SACJ;IACL,CAAC;IAEO,oBAAoB;QACxB,IAAI,CAAC,KAAK,CAAC,gCAAgC,CAAC,+BAA+B,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACrG,IAAI,CAAC,cAAc,CAAC,2BAA2B,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/D,IAAI,CAAC,cAAc,CAAC,0BAA0B,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9D,IAAI,CAAC,cAAc,CAAC,+BAA+B,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACnE,IAAI,CAAC,cAAc,CAAC,wBAAwB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5D,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAEO,mBAAmB;QACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAClE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;SACvC;QACD,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC3B,CAAC;IAEO,kBAAkB;QACtB,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,IAAI,CAAC,oBAAoB;YAAE,KAAK,EAAE,CAAC;QACvC,IAAI,IAAI,CAAC,8BAA8B;YAAE,KAAK,EAAE,CAAC;QACjD,IAAI,IAAI,CAAC,iBAAiB;YAAE,KAAK,EAAE,CAAC;QACpC,IAAI,IAAI,CAAC,wBAAwB;YAAE,KAAK,EAAE,CAAC;QAC3C,IAAI,IAAI,CAAC,2BAA2B;YAAE,KAAK,EAAE,CAAC;QAC9C,IAAI,IAAI,CAAC,4BAA4B;YAAE,KAAK,EAAE,CAAC;QAE/C,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACzC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;QACrC,MAAM,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC;QACzB,MAAM,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,MAAM,eAAe,GAAG,IAAI,CAAC,KAAM,CAAC,eAAe,CAAC;YACpD,IAAI,CAAC,eAAe,EAAE;gBAClB,MAAM,CAAC,KAAK,CAAC,4EAA4E,CAAC,CAAC;gBAC3F,OAAO;aACV;YACD,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACnD,CAAC,IAAI,KAAK,CAAC;YACX,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;gBACT,CAAC,GAAG,CAAC,CAAC;gBACN,CAAC,IAAI,MAAM,CAAC;aACf;SACJ;QAED,IAAI,IAAI,CAAC,8BAA8B,EAAE;YACrC,IAAI,CAAC,2BAA2B,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACzE,CAAC,IAAI,KAAK,CAAC;YACX,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;gBACT,CAAC,GAAG,CAAC,CAAC;gBACN,CAAC,IAAI,MAAM,CAAC;aACf;SACJ;QACD,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACxB,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC5D,CAAC,IAAI,KAAK,CAAC;YACX,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;gBACT,CAAC,GAAG,CAAC,CAAC;gBACN,CAAC,IAAI,MAAM,CAAC;aACf;SACJ;QACD,IAAI,IAAI,CAAC,wBAAwB,EAAE;YAC/B,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC/D,CAAC,IAAI,KAAK,CAAC;YACX,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;gBACT,CAAC,GAAG,CAAC,CAAC;gBACN,CAAC,IAAI,MAAM,CAAC;aACf;SACJ;QACD,IAAI,IAAI,CAAC,2BAA2B,EAAE;YAClC,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC9D,CAAC,IAAI,KAAK,CAAC;YACX,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;gBACT,CAAC,GAAG,CAAC,CAAC;gBACN,CAAC,IAAI,MAAM,CAAC;aACf;SACJ;QACD,IAAI,IAAI,CAAC,4BAA4B,EAAE;YACnC,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC/D,CAAC,IAAI,KAAK,CAAC;YACX,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;gBACT,CAAC,GAAG,CAAC,CAAC;gBACN,CAAC,IAAI,MAAM,CAAC;aACf;SACJ;IACL,CAAC;IAED;;OAEG;IACI,kBAAkB;QACrB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACnC,CAAC;IAED;;;OAGG;IACI,iBAAiB;QACpB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IAClC,CAAC;IAEO,mBAAmB;QACvB,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAEO,uBAAuB;QAC3B,uFAAuF;QACvF,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,YAAY,eAAe,EAAE;YACpD,IAAI,CAAC,KAAK,CAAC,8BAA8B,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;gBACrD,IAAI,QAAQ,GAAY,KAAK,CAAC;gBAC9B,IAAI,MAAM,YAAY,eAAe,EAAE;oBACnC,QAAQ;wBACJ,MAAM,CAAC,mBAAmB,KAAK,CAAC;4BAChC,MAAM,CAAC,kBAAkB,KAAK,CAAC;4BAC/B,MAAM,CAAC,oBAAoB,KAAK,CAAC;4BACjC,MAAM,CAAC,gBAAgB,KAAK,CAAC;4BAC7B,MAAM,CAAC,gBAAgB,KAAK,CAAC,CAAC;iBACrC;qBAAM,IAAI,MAAM,YAAY,UAAU,EAAE;oBACrC,QAAQ;wBACJ,MAAM,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC;4BAC9B,MAAM,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC;4BAC9B,MAAM,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC;4BAC9B,MAAM,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC;4BAC7B,MAAM,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,CAAC;iBACrC;gBACD,IAAI,IAAI,CAAC,iBAAiB,EAAE;oBACxB,IAAI,QAAQ,EAAE;wBACV,uCAAuC;wBACvC,0CAA0C;qBAC7C;yBAAM;wBACH,wCAAwC;wBACxC,0CAA0C;qBAC7C;iBACJ;YACL,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAED;;;;OAIG;IACa,kBAAkB,CAAC,eAAgC;QAC/D,OAAO,CAAC,CAAC,eAAe,CAAC,sBAAsB,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;IACtF,CAAC;IAED;;;OAGG;IACI,OAAO;QACV,OAAO,CACH,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;YAC5B,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;YAC7B,IAAI,CAAC,2BAA2B,CAAC,OAAO,EAAE;YAC1C,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;YAC7D,CAAC,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;YAC3D,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC,CAChE,CAAC;IACN,CAAC;IAED;;OAEG;IACI,MAAM;QACT,2GAA2G;QAC3G,yGAAyG;QACzG,gCAAgC;QAChC,IAAI,IAAI,CAAC,cAAc,CAAC,wBAAwB,EAAE,EAAE;YAChD,OAAO;SACV;QAED,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACxB,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC/C,OAAO,IAAI,YAAY,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YACtF,CAAC,CAAC,CAAC;YACH,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAChE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,aAAa,KAAK,CAAC,EAAE;gBAC3D,MAAM,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;gBACxE,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBAC/B,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;gBACzB,OAAO;aACV;YACD,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;YAC1C,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,gBAAgB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;YAC7E,MAAM,mBAAmB,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,GAAG,GAAG,QAAQ,EAAE,GAAG,GAAG,QAAQ,EAAE,GAAG,GAAG,QAAQ,CAAC,EAAE,IAAI,UAAU,EAAE,EAAE,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAChJ,MAAM,oBAAoB,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,IAAI,UAAU,EAAE,EAAE,MAAM,CAAC,CAAC;YAClG,oBAAoB,CAAC,aAAa,CAAC,mBAAmB,EAAE,mBAAmB,CAAC,CAAC;YAC7E,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,mBAAmB,CAAC,CAAC;YACjE,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,CAAC;YAC7D,oCAAoC;YACpC,IAAI,CAAC,gBAAgB,EAAE,aAAa,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC;YACrD,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAC/B,kDAAkD;YAClD,wCAAwC;YACxC,+CAA+C;YAE/C,iFAAiF;YACjF,yFAAyF;YACzF,IAAI,CAAC,eAAe,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;SACjF;QAED,qCAAqC;QACrC,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAC1D,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAChC,iFAAiF;YACjF,yFAAyF;YACzF,IAAI,CAAC,eAAe,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;SACjF;IACL,CAAC;IAED;;;OAGG;IACa,YAAY;QACxB,OAAO,0BAA0B,CAAC;IACtC,CAAC;IAED;;OAEG;IACa,OAAO;QACnB,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QAC7B,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;QAC9B,IAAI,CAAC,2BAA2B,CAAC,OAAO,EAAE,CAAC;QAC3C,IAAI,CAAC,iBAAiB,EAAE,OAAO,EAAE,CAAC;QAClC,IAAI,CAAC,gBAAgB,EAAE,OAAO,EAAE,CAAC;QACjC,IAAI,CAAC,iBAAiB,EAAE,OAAO,EAAE,CAAC;QAClC,KAAK,CAAC,OAAO,EAAE,CAAC;IACpB,CAAC;CACJ","sourcesContent":["import { Constants } from \"../../Engines/constants\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Matrix, Vector3, Vector4, Quaternion } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../../Materials/Textures/texture\";\r\nimport type { PrePassEffectConfiguration } from \"../prePassEffectConfiguration\";\r\nimport { PrePassRenderer } from \"../prePassRenderer\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { _IblShadowsVoxelRenderer } from \"./iblShadowsVoxelRenderer\";\r\nimport { _IblShadowsVoxelTracingPass } from \"./iblShadowsVoxelTracingPass\";\r\n\r\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\r\nimport type { PostProcessOptions } from \"../../PostProcesses/postProcess\";\r\nimport { _IblShadowsImportanceSamplingRenderer } from \"./iblShadowsImportanceSamplingRenderer\";\r\nimport { _IblShadowsSpatialBlurPass } from \"./iblShadowsSpatialBlurPass\";\r\nimport { _IblShadowsAccumulationPass } from \"./iblShadowsAccumulationPass\";\r\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { PostProcessRenderPipeline } from \"../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"core/PostProcesses/RenderPipeline/postProcessRenderEffect\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport { ShaderLanguage } from \"core/Materials/shaderLanguage\";\r\n\r\ninterface IblShadowsSettings {\r\n    /**\r\n     * The exponent of the resolution of the voxel shadow grid. Higher resolutions will result in sharper\r\n     * shadows but are more expensive to compute and require more memory.\r\n     * The resolution is calculated as 2 to the power of this number.\r\n     */\r\n    resolutionExp: number;\r\n\r\n    /**\r\n     * The number of different directions to sample during the voxel tracing pass. Higher\r\n     * values will result in better quality, more stable shadows but are more expensive to compute.\r\n     */\r\n    sampleDirections: number;\r\n\r\n    /**\r\n     * How dark the shadows are. 1.0 is full opacity, 0.0 is no shadows.\r\n     */\r\n    shadowOpacity: number;\r\n\r\n    /**\r\n     * How long the shadows remain in the scene. 0.0 is no persistence, 1.0 is full persistence.\r\n     */\r\n    shadowRemenance: number;\r\n\r\n    /**\r\n     * Render the voxel grid from 3 different axis. This will result in better quality shadows with fewer\r\n     * bits of missing geometry.\r\n     */\r\n    triPlanarVoxelization: boolean;\r\n\r\n    /**\r\n     * Separate control for the opacity of the voxel shadows.\r\n     */\r\n    voxelShadowOpacity: number;\r\n\r\n    /**\r\n     * Include screen-space shadows in the IBL shadow pipeline. This adds sharp shadows to small details\r\n     * but only applies close to a shadow-casting object.\r\n     */\r\n    ssShadowsEnabled: boolean;\r\n\r\n    /**\r\n     * The number of samples used in the screen space shadow pass.\r\n     */\r\n    ssShadowSampleCount: number;\r\n\r\n    /**\r\n     * The stride of the screen-space shadow pass. This controls the distance between samples.\r\n     */\r\n    ssShadowStride: number;\r\n\r\n    /**\r\n     * The maximum distance a shadow can be cast in screen space. This should usually be kept small\r\n     * as screenspace shadows are mostly useful for small details.\r\n     */\r\n    ssShadowMaxDist: number;\r\n\r\n    /**\r\n     * Screen-space shadow thickness. This value controls the perceived thickness of the SS shadows.\r\n     */\r\n    ssShadowThickness: number;\r\n}\r\n\r\nclass IblShadowsPrepassConfiguration implements PrePassEffectConfiguration {\r\n    /**\r\n     * Is this effect enabled\r\n     */\r\n    public enabled = true;\r\n\r\n    /**\r\n     * Name of the configuration\r\n     */\r\n    public name = \"iblShadows\";\r\n\r\n    /**\r\n     * Textures that should be present in the MRT for this effect to work\r\n     */\r\n    public readonly texturesRequired: number[] = [\r\n        Constants.PREPASS_DEPTH_TEXTURE_TYPE,\r\n        Constants.PREPASS_SCREENSPACE_DEPTH_TEXTURE_TYPE,\r\n        Constants.PREPASS_WORLD_NORMAL_TEXTURE_TYPE,\r\n        // Constants.PREPASS_NORMAL_TEXTURE_TYPE, // TODO - don't need this for IBL shadows\r\n        Constants.PREPASS_VELOCITY_LINEAR_TEXTURE_TYPE,\r\n        // Local positions used for shadow accumulation pass\r\n        Constants.PREPASS_POSITION_TEXTURE_TYPE,\r\n        Constants.PREPASS_LOCAL_POSITION_TEXTURE_TYPE,\r\n    ];\r\n}\r\n\r\n/**\r\n * Voxel-based shadow rendering for IBL's.\r\n * This should not be instanciated directly, as it is part of a scene component\r\n */\r\nexport class IblShadowsRenderPipeline extends PostProcessRenderPipeline {\r\n    /**\r\n     * The scene that this pipeline is attached to\r\n     */\r\n    public scene: Scene;\r\n\r\n    private _voxelizationDirty: boolean = true;\r\n    private _boundsNeedUpdate: boolean = true;\r\n\r\n    private _allowDebugPasses: boolean = false;\r\n    private _debugPasses: { pass: PostProcess; enabled: boolean }[] = [];\r\n\r\n    private _shadowCompositePP: PostProcess;\r\n    private _prePassEffectConfiguration: IblShadowsPrepassConfiguration;\r\n\r\n    private _excludedMeshes: number[] = [];\r\n\r\n    private _voxelRenderer: _IblShadowsVoxelRenderer;\r\n    private _importanceSamplingRenderer: _IblShadowsImportanceSamplingRenderer;\r\n    private _voxelTracingPass: _IblShadowsVoxelTracingPass;\r\n    private _spatialBlurPass: _IblShadowsSpatialBlurPass;\r\n    private _accumulationPass: _IblShadowsAccumulationPass;\r\n    private _noiseTexture: Texture;\r\n    private _shadowOpacity: number = 0.75;\r\n    private _enabled: boolean = true;\r\n\r\n    /**\r\n     * The current world-space size of that the voxel grid covers in the scene.\r\n     */\r\n    public voxelGridSize: number = 1.0;\r\n\r\n    /**\r\n     * How dark the shadows appear. 1.0 is full opacity, 0.0 is no shadows.\r\n     */\r\n    public get shadowOpacity(): number {\r\n        return this._shadowOpacity;\r\n    }\r\n\r\n    /**\r\n     * How dark the shadows appear. 1.0 is full opacity, 0.0 is no shadows.\r\n     */\r\n    public set shadowOpacity(value: number) {\r\n        this._shadowOpacity = value;\r\n    }\r\n\r\n    /**\r\n     * How dark the voxel shadows appear. 1.0 is full opacity, 0.0 is no shadows.\r\n     */\r\n    public get voxelShadowOpacity() {\r\n        return this._voxelTracingPass?.voxelShadowOpacity;\r\n    }\r\n\r\n    /**\r\n     * How dark the voxel shadows appear. 1.0 is full opacity, 0.0 is no shadows.\r\n     */\r\n    public set voxelShadowOpacity(value: number) {\r\n        if (!this._voxelTracingPass) return;\r\n        this._voxelTracingPass.voxelShadowOpacity = value;\r\n    }\r\n\r\n    /**\r\n     * How dark the screen-space shadows appear. 1.0 is full opacity, 0.0 is no shadows.\r\n     */\r\n    public get ssShadowOpacity(): number {\r\n        return this._voxelTracingPass?.ssShadowOpacity;\r\n    }\r\n\r\n    /**\r\n     * How dark the screen-space shadows appear. 1.0 is full opacity, 0.0 is no shadows.\r\n     */\r\n    public set ssShadowOpacity(value: number) {\r\n        if (!this._voxelTracingPass) return;\r\n        this._voxelTracingPass.ssShadowOpacity = value;\r\n    }\r\n\r\n    /**\r\n     * The number of samples used in the screen space shadow pass.\r\n     */\r\n    public get ssShadowSamples(): number {\r\n        return this._voxelTracingPass?.sssSamples;\r\n    }\r\n\r\n    /**\r\n     * The number of samples used in the screen space shadow pass.\r\n     */\r\n    public set ssShadowSamples(value: number) {\r\n        if (!this._voxelTracingPass) return;\r\n        this._voxelTracingPass.sssSamples = value;\r\n    }\r\n\r\n    /**\r\n     * The stride of the screen-space shadow pass. This controls the distance between samples.\r\n     */\r\n    public get ssShadowStride(): number {\r\n        return this._voxelTracingPass?.sssStride;\r\n    }\r\n\r\n    /**\r\n     * The stride of the screen-space shadow pass. This controls the distance between samples.\r\n     */\r\n    public set ssShadowStride(value: number) {\r\n        if (!this._voxelTracingPass) return;\r\n        this._voxelTracingPass.sssStride = value;\r\n    }\r\n\r\n    /**\r\n     * The maximum distance a shadow can be cast in screen space. This should usually be kept small\r\n     * as screenspace shadows are mostly useful for small details.\r\n     */\r\n    public get ssShadowMaxDist(): number {\r\n        return this._voxelTracingPass?.sssMaxDist;\r\n    }\r\n\r\n    /**\r\n     * The maximum distance a shadow can be cast in screen space. This should usually be kept small\r\n     * as screenspace shadows are mostly useful for small details.\r\n     */\r\n    public set ssShadowMaxDist(value: number) {\r\n        if (!this._voxelTracingPass) return;\r\n        this._voxelTracingPass.sssMaxDist = value;\r\n    }\r\n\r\n    /**\r\n     * Screen-space shadow thickness. This value controls the perceived thickness of the SS shadows.\r\n     */\r\n    public get ssShadowThickness(): number {\r\n        return this._voxelTracingPass?.sssThickness;\r\n    }\r\n\r\n    /**\r\n     * Screen-space shadow thickness. This value controls the perceived thickness of the SS shadows.\r\n     */\r\n    public set ssShadowThickness(value: number) {\r\n        if (!this._voxelTracingPass) return;\r\n        this._voxelTracingPass.sssThickness = value;\r\n    }\r\n\r\n    /**\r\n     * Set the IBL image to be used for shadowing. It can be either a cubemap\r\n     * or a 2D equirectangular texture.\r\n     * @param iblSource The texture to use for IBL shadowing\r\n     */\r\n    public setIblTexture(iblSource: BaseTexture) {\r\n        if (!this._importanceSamplingRenderer) return;\r\n        this._importanceSamplingRenderer.iblSource = iblSource;\r\n    }\r\n\r\n    /**\r\n     * Returns the texture containing the voxel grid data\r\n     * @returns The texture containing the voxel grid data\r\n     */\r\n    public getVoxelGridTexture(): Texture {\r\n        return this._voxelRenderer?.getVoxelGrid();\r\n    }\r\n\r\n    /**\r\n     * Returns the texture containing the importance sampling CDF data for the IBL shadow pipeline\r\n     * @returns The texture containing the importance sampling CDF data for the IBL shadow pipeline\r\n     */\r\n    public getIcdfyTexture(): Texture {\r\n        return this._importanceSamplingRenderer!.getIcdfyTexture();\r\n    }\r\n\r\n    /**\r\n     * Returns the texture containing the importance sampling CDF data for the IBL shadow pipeline\r\n     * @returns The texture containing the importance sampling CDF data for the IBL shadow pipeline\r\n     */\r\n    public getIcdfxTexture(): Texture {\r\n        return this._importanceSamplingRenderer!.getIcdfxTexture();\r\n    }\r\n\r\n    private _gbufferDebugPass: PostProcess;\r\n    private _gbufferDebugEnabled: boolean = false;\r\n    private _gBufferDebugSizeParams: Vector4 = new Vector4(0.0, 0.0, 0.0, 0.0);\r\n\r\n    /**\r\n     * Is the debug view of the G-Buffer enabled?\r\n     */\r\n    public get gbufferDebugEnabled(): boolean {\r\n        return this._gbufferDebugEnabled;\r\n    }\r\n\r\n    /**\r\n     * Turn on or off the debug view of the G-Buffer\r\n     */\r\n    public set gbufferDebugEnabled(enabled: boolean) {\r\n        if (enabled && !this.allowDebugPasses) {\r\n            Logger.Warn(\"Can't enable G-Buffer debug view without setting allowDebugPasses to true.\");\r\n            return;\r\n        }\r\n        this._gbufferDebugEnabled = enabled;\r\n        if (enabled) {\r\n            this._enableEffect(this._getGBufferDebugPass().name, this.cameras);\r\n        } else {\r\n            this._disableEffect(this._getGBufferDebugPass().name, this.cameras);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Turn on or off the debug view of the CDF importance sampling data\r\n     */\r\n    public get importanceSamplingDebugEnabled(): boolean {\r\n        return this._importanceSamplingRenderer?.debugEnabled;\r\n    }\r\n\r\n    /**\r\n     * Turn on or off the debug view of the CDF importance sampling data\r\n     */\r\n    public set importanceSamplingDebugEnabled(enabled: boolean) {\r\n        if (!this._importanceSamplingRenderer) return;\r\n        if (enabled && !this.allowDebugPasses) {\r\n            Logger.Warn(\"Can't enable importance sampling debug view without setting allowDebugPasses to true.\");\r\n            return;\r\n        }\r\n        if (enabled === this._importanceSamplingRenderer.debugEnabled) return;\r\n        this._importanceSamplingRenderer.debugEnabled = enabled;\r\n        if (enabled) {\r\n            this._enableEffect(this._importanceSamplingRenderer.debugPassName, this.cameras);\r\n        } else {\r\n            this._disableEffect(this._importanceSamplingRenderer.debugPassName, this.cameras);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Turn on or off the debug view of the voxel grid\r\n     */\r\n    public get voxelDebugEnabled(): boolean {\r\n        return this._voxelRenderer?.voxelDebugEnabled;\r\n    }\r\n\r\n    /**\r\n     * Turn on or off the debug view of the voxel grid\r\n     */\r\n    public set voxelDebugEnabled(enabled: boolean) {\r\n        if (!this._voxelRenderer) return;\r\n        if (enabled && !this.allowDebugPasses) {\r\n            Logger.Warn(\"Can't enable voxel debug view without setting allowDebugPasses to true.\");\r\n            return;\r\n        }\r\n        this._voxelRenderer.voxelDebugEnabled = enabled;\r\n        if (enabled) {\r\n            this._enableEffect(this._voxelRenderer.debugPassName, this.cameras);\r\n        } else {\r\n            this._disableEffect(this._voxelRenderer.debugPassName, this.cameras);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the axis to display for the voxel grid debug view\r\n     * When using tri-axis voxelization, this will display the voxel grid for the specified axis\r\n     */\r\n    public get voxelDebugAxis(): number {\r\n        return this._voxelRenderer?.voxelDebugAxis;\r\n    }\r\n\r\n    /**\r\n     * Set the axis to display for the voxel grid debug view\r\n     * When using tri-axis voxelization, this will display the voxel grid for the specified axis\r\n     */\r\n    public set voxelDebugAxis(axisNum: number) {\r\n        if (!this._voxelRenderer) return;\r\n        this._voxelRenderer.voxelDebugAxis = axisNum;\r\n    }\r\n\r\n    /**\r\n     * Set the mip level to display for the voxel grid debug view\r\n     */\r\n    public set voxelDebugDisplayMip(mipNum: number) {\r\n        if (!this._voxelRenderer) return;\r\n        this._voxelRenderer.setDebugMipNumber(mipNum);\r\n    }\r\n\r\n    /**\r\n     * Display the debug view for the voxel tracing pass\r\n     */\r\n    public get voxelTracingDebugEnabled(): boolean {\r\n        return this._voxelTracingPass?.debugEnabled;\r\n    }\r\n\r\n    /**\r\n     * Display the debug view for the voxel tracing pass\r\n     */\r\n    public set voxelTracingDebugEnabled(enabled: boolean) {\r\n        if (!this._voxelTracingPass) return;\r\n        if (enabled && !this.allowDebugPasses) {\r\n            Logger.Warn(\"Can't enable voxel tracing debug view without setting allowDebugPasses to true.\");\r\n            return;\r\n        }\r\n        if (enabled === this._voxelTracingPass.debugEnabled) return;\r\n        this._voxelTracingPass.debugEnabled = enabled;\r\n        if (enabled) {\r\n            this._enableEffect(this._voxelTracingPass.debugPassName, this.cameras);\r\n        } else {\r\n            this._disableEffect(this._voxelTracingPass.debugPassName, this.cameras);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Display the debug view for the spatial blur pass\r\n     */\r\n    public get spatialBlurPassDebugEnabled(): boolean {\r\n        return this._spatialBlurPass?.debugEnabled;\r\n    }\r\n\r\n    /**\r\n     * Display the debug view for the spatial blur pass\r\n     */\r\n    public set spatialBlurPassDebugEnabled(enabled: boolean) {\r\n        if (!this._spatialBlurPass) return;\r\n        if (enabled && !this.allowDebugPasses) {\r\n            Logger.Warn(\"Can't enable spatial blur debug view without setting allowDebugPasses to true.\");\r\n            return;\r\n        }\r\n        if (enabled === this._spatialBlurPass.debugEnabled) return;\r\n        this._spatialBlurPass.debugEnabled = enabled;\r\n        if (enabled) {\r\n            this._enableEffect(this._spatialBlurPass.debugPassName, this.cameras);\r\n        } else {\r\n            this._disableEffect(this._spatialBlurPass.debugPassName, this.cameras);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Display the debug view for the accumulation pass\r\n     */\r\n    public get accumulationPassDebugEnabled(): boolean {\r\n        return this._accumulationPass?.debugEnabled;\r\n    }\r\n\r\n    /**\r\n     * Display the debug view for the accumulation pass\r\n     */\r\n    public set accumulationPassDebugEnabled(enabled: boolean) {\r\n        if (!this._accumulationPass) return;\r\n        if (enabled && !this.allowDebugPasses) {\r\n            Logger.Warn(\"Can't enable accumulation pass debug view without setting allowDebugPasses to true.\");\r\n            return;\r\n        }\r\n        if (enabled === this._accumulationPass.debugEnabled) return;\r\n        this._accumulationPass.debugEnabled = enabled;\r\n        if (enabled) {\r\n            this._enableEffect(this._accumulationPass.debugPassName, this.cameras);\r\n        } else {\r\n            this._disableEffect(this._accumulationPass.debugPassName, this.cameras);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a mesh in the exclusion list to prevent it to be handled by the IBL shadow pipeline\r\n     * @param mesh The mesh to exclude from the IBL shadow pipeline\r\n     */\r\n    public addExcludedMesh(mesh: AbstractMesh): void {\r\n        if (this._excludedMeshes.indexOf(mesh.uniqueId) === -1) {\r\n            this._excludedMeshes.push(mesh.uniqueId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a mesh from the exclusion list of the IBL shadow pipeline\r\n     * @param mesh The mesh to remove\r\n     */\r\n    public removeExcludedMesh(mesh: AbstractMesh): void {\r\n        const index = this._excludedMeshes.indexOf(mesh.uniqueId);\r\n        if (index !== -1) {\r\n            this._excludedMeshes.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The exponent of the resolution of the voxel shadow grid. Higher resolutions will result in sharper\r\n     * shadows but are more expensive to compute and require more memory.\r\n     * The resolution is calculated as 2 to the power of this number.\r\n     */\r\n    public get resolutionExp() {\r\n        return this._voxelRenderer.voxelResolutionExp;\r\n    }\r\n\r\n    /**\r\n     * The exponent of the resolution of the voxel shadow grid. Higher resolutions will result in sharper\r\n     * shadows but are more expensive to compute and require more memory.\r\n     * The resolution is calculated as 2 to the power of this number.\r\n     */\r\n    public set resolutionExp(newResolution: number) {\r\n        if (newResolution === this._voxelRenderer.voxelResolutionExp) return;\r\n        if (this._voxelRenderer.isVoxelizationInProgress()) {\r\n            Logger.Warn(\"Can't change the resolution of the voxel grid while voxelization is in progress.\");\r\n            return;\r\n        }\r\n        this._voxelRenderer.voxelResolutionExp = newResolution;\r\n        this.updateVoxelization();\r\n        this._accumulationPass.reset = true;\r\n    }\r\n\r\n    /**\r\n     * The number of different directions to sample during the voxel tracing pass\r\n     */\r\n    public get sampleDirections() {\r\n        return this._voxelTracingPass?.sampleDirections;\r\n    }\r\n\r\n    /**\r\n     * The number of different directions to sample during the voxel tracing pass\r\n     */\r\n    public set sampleDirections(value: number) {\r\n        if (!this._voxelTracingPass) return;\r\n        this._voxelTracingPass.sampleDirections = value;\r\n    }\r\n\r\n    /**\r\n     * The decree to which the shadows persist between frames. 0.0 is no persistence, 1.0 is full persistence.\r\n     **/\r\n    public get shadowRemenance(): number {\r\n        return this._accumulationPass?.remenance;\r\n    }\r\n\r\n    /**\r\n     * The decree to which the shadows persist between frames. 0.0 is no persistence, 1.0 is full persistence.\r\n     **/\r\n    public set shadowRemenance(value: number) {\r\n        if (!this._accumulationPass) return;\r\n        this._accumulationPass.remenance = value;\r\n    }\r\n\r\n    /**\r\n     * The global rotation of the IBL for shadows\r\n     */\r\n    public get envRotation() {\r\n        return this._voxelTracingPass?.envRotation;\r\n    }\r\n\r\n    /**\r\n     * The global rotation of the IBL for shadows\r\n     */\r\n    public set envRotation(value: number) {\r\n        if (!this._voxelTracingPass) return;\r\n        this._voxelTracingPass.envRotation = value;\r\n    }\r\n\r\n    /**\r\n     * Allow debug passes to be enabled. Default is false.\r\n     */\r\n    public get allowDebugPasses(): boolean {\r\n        return this._allowDebugPasses;\r\n    }\r\n\r\n    /**\r\n     * Allow debug passes to be enabled. Default is false.\r\n     */\r\n    public set allowDebugPasses(value: boolean) {\r\n        if (this._allowDebugPasses === value) return;\r\n        this._allowDebugPasses = value;\r\n        if (value) {\r\n            if (this._importanceSamplingRenderer.isReady()) {\r\n                this._createDebugPasses();\r\n            } else {\r\n                this._importanceSamplingRenderer.onReadyObservable.addOnce(() => {\r\n                    this._createDebugPasses();\r\n                });\r\n            }\r\n        } else {\r\n            this._disposeDebugPasses();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Support test.\r\n     */\r\n    public static get IsSupported(): boolean {\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            return false;\r\n        }\r\n        return engine._features.supportIBLShadows;\r\n    }\r\n\r\n    /**\r\n     * @param name The rendering pipeline name\r\n     * @param scene The scene linked to this pipeline\r\n     * @param options Options to configure the pipeline\r\n     * @param cameras Cameras to apply the pipeline to.\r\n     */\r\n    constructor(name: string, scene: Scene, options: Partial<IblShadowsSettings> = {}, cameras?: Camera[]) {\r\n        super(scene.getEngine(), name);\r\n        this.scene = scene;\r\n        //  We need a depth texture for opaque\r\n        if (!scene.enablePrePassRenderer()) {\r\n            Logger.Warn(\"IBL Shadows Render Pipeline could not enable PrePass, aborting.\");\r\n            return;\r\n        }\r\n        this.shadowOpacity = options.shadowOpacity || 0.75;\r\n        this._prePassEffectConfiguration = new IblShadowsPrepassConfiguration();\r\n        this._voxelRenderer = new _IblShadowsVoxelRenderer(\r\n            this.scene,\r\n            this,\r\n            options ? options.resolutionExp : 6,\r\n            options.triPlanarVoxelization !== undefined ? options.triPlanarVoxelization : true\r\n        );\r\n        this._importanceSamplingRenderer = new _IblShadowsImportanceSamplingRenderer(this.scene);\r\n        this._voxelTracingPass = new _IblShadowsVoxelTracingPass(this.scene, this);\r\n        this.sampleDirections = options.sampleDirections || 2;\r\n        this.voxelShadowOpacity = options.voxelShadowOpacity || 1.0;\r\n        this.ssShadowOpacity = options.ssShadowsEnabled === undefined || options.ssShadowsEnabled ? 1.0 : 0.0;\r\n        this.ssShadowMaxDist = options.ssShadowMaxDist || 0.05;\r\n        this.ssShadowSamples = options.ssShadowSampleCount || 16;\r\n        this.ssShadowStride = options.ssShadowStride || 8;\r\n        this.ssShadowThickness = options.ssShadowThickness || 0.5;\r\n        this._spatialBlurPass = new _IblShadowsSpatialBlurPass(this.scene);\r\n        this._accumulationPass = new _IblShadowsAccumulationPass(this.scene);\r\n        this.shadowRemenance = options.shadowRemenance || 0.75;\r\n        this._noiseTexture = new Texture(\"https://assets.babylonjs.com/textures/blue_noise/blue_noise_rgb.png\", this.scene, false, true, Constants.TEXTURE_NEAREST_SAMPLINGMODE);\r\n        if (this.scene.environmentTexture) {\r\n            this._importanceSamplingRenderer.iblSource = this.scene.environmentTexture;\r\n        }\r\n\r\n        // Create post process that applies the shadows to the scene\r\n        this._createShadowCombinePostProcess();\r\n\r\n        scene.postProcessRenderPipelineManager.addPipeline(this);\r\n\r\n        this.scene.onNewMeshAddedObservable.add(this.updateSceneBounds.bind(this));\r\n        this.scene.onMeshRemovedObservable.add(this.updateSceneBounds.bind(this));\r\n        this.scene.onActiveCameraChanged.add(this._listenForCameraChanges.bind(this));\r\n        this.scene.onBeforeRenderObservable.add(this._updateBeforeRender.bind(this));\r\n\r\n        this._listenForCameraChanges();\r\n        this.scene.getEngine().onResizeObservable.add(this._handleResize.bind(this));\r\n\r\n        // Only turn on the pipeline when the importance sampling RT's are ready\r\n        this._importanceSamplingRenderer.onReadyObservable.addOnce(() => {\r\n            this._createEffectPasses(cameras);\r\n            const checkVoxelRendererReady = () => {\r\n                if (this._voxelRenderer.isReady()) {\r\n                    this.toggleShadow(this._enabled);\r\n                    if (this._enabled) {\r\n                        this._voxelizationDirty = true;\r\n                    }\r\n                } else {\r\n                    setTimeout(() => {\r\n                        checkVoxelRendererReady();\r\n                    }, 16);\r\n                }\r\n            };\r\n\r\n            checkVoxelRendererReady();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Toggle the shadow tracing on or off\r\n     * @param enabled Toggle the shadow tracing on or off\r\n     */\r\n    public toggleShadow(enabled: boolean) {\r\n        this._enabled = enabled;\r\n        if (enabled) {\r\n            this._enableEffect(\"IBLShadowVoxelTracingPass\", this.cameras);\r\n            this._enableEffect(\"IBLShadowSpatialBlurPass\", this.cameras);\r\n            this._enableEffect(\"IBLShadowAccumulationBlurPass\", this.cameras);\r\n            this._enableEffect(\"IBLShadowCompositePass\", this.cameras);\r\n        } else {\r\n            this._disableEffect(\"IBLShadowVoxelTracingPass\", null);\r\n            this._disableEffect(\"IBLShadowSpatialBlurPass\", null);\r\n            this._disableEffect(\"IBLShadowAccumulationBlurPass\", null);\r\n            this._disableEffect(\"IBLShadowCompositePass\", null);\r\n        }\r\n    }\r\n\r\n    private _handleResize() {\r\n        this._voxelRenderer.resize();\r\n        this._accumulationPass?.resize();\r\n    }\r\n\r\n    private _createShadowCombinePostProcess() {\r\n        const isWebGPU = this.engine.isWebGPU;\r\n        const compositeOptions: PostProcessOptions = {\r\n            width: this.scene.getEngine().getRenderWidth(),\r\n            height: this.scene.getEngine().getRenderHeight(),\r\n            uniforms: [\"shadowOpacity\"],\r\n            samplers: [\"sceneTexture\"],\r\n            samplingMode: Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n            engine: this.scene.getEngine(),\r\n            textureType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n            reusable: false,\r\n            shaderLanguage: isWebGPU ? ShaderLanguage.WGSL : ShaderLanguage.GLSL,\r\n            extraInitializations: (useWebGPU: boolean, list: Promise<any>[]) => {\r\n                if (useWebGPU) {\r\n                    list.push(import(\"../../ShadersWGSL/iblShadowsCombine.fragment\"));\r\n                } else {\r\n                    list.push(import(\"../../Shaders/iblShadowsCombine.fragment\"));\r\n                }\r\n            },\r\n        };\r\n        this._shadowCompositePP = new PostProcess(\"iblShadowsCombine\", \"iblShadowsCombine\", compositeOptions);\r\n        this._shadowCompositePP.autoClear = false;\r\n        this._shadowCompositePP.onApplyObservable.add((effect) => {\r\n            // Setting the input of the tracing pass because this is the scene RT that we want to apply the shadows to.\r\n            effect.setTextureFromPostProcess(\"sceneTexture\", this._voxelTracingPass.getPassPP());\r\n            effect.setFloat(\"shadowOpacity\", this._shadowOpacity);\r\n            if (\r\n                this._importanceSamplingRenderer?.isReady() &&\r\n                this._voxelRenderer?.isReady() &&\r\n                this._voxelTracingPass?.isReady() &&\r\n                this._spatialBlurPass?.isReady() &&\r\n                this._accumulationPass?.isReady()\r\n            ) {\r\n                this.update();\r\n            }\r\n        });\r\n        this._shadowCompositePP._prePassEffectConfiguration = this._prePassEffectConfiguration;\r\n    }\r\n\r\n    private _createEffectPasses(cameras: Camera[] | undefined) {\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                this.scene.getEngine(),\r\n                \"IBLShadowVoxelTracingPass\",\r\n                () => {\r\n                    return this._voxelTracingPass.getPassPP();\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                this.scene.getEngine(),\r\n                \"IBLShadowSpatialBlurPass\",\r\n                () => {\r\n                    return this._spatialBlurPass.getPassPP();\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                this.scene.getEngine(),\r\n                \"IBLShadowAccumulationBlurPass\",\r\n                () => {\r\n                    return this._accumulationPass.getPassPP();\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                this.scene.getEngine(),\r\n                \"IBLShadowCompositePass\",\r\n                () => {\r\n                    return this._shadowCompositePP;\r\n                },\r\n                true\r\n            )\r\n        );\r\n\r\n        if (cameras) {\r\n            this.scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this.name, cameras);\r\n        }\r\n\r\n        this.toggleShadow(false);\r\n        this._enabled = true;\r\n    }\r\n\r\n    private _getGBufferDebugPass(): PostProcess {\r\n        if (this._gbufferDebugPass) {\r\n            return this._gbufferDebugPass;\r\n        }\r\n        const isWebGPU = this.engine.isWebGPU;\r\n        const textureNames: string[] = this._prePassEffectConfiguration.texturesRequired.map((type) => PrePassRenderer.TextureFormats[type].name.toString());\r\n\r\n        const options: PostProcessOptions = {\r\n            width: this.scene.getEngine().getRenderWidth(),\r\n            height: this.scene.getEngine().getRenderHeight(),\r\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n            engine: this.scene.getEngine(),\r\n            textureType: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n            textureFormat: Constants.TEXTUREFORMAT_RGBA,\r\n            uniforms: [\"sizeParams\"],\r\n            samplers: textureNames,\r\n            reusable: false,\r\n            shaderLanguage: isWebGPU ? ShaderLanguage.WGSL : ShaderLanguage.GLSL,\r\n            extraInitializations: (useWebGPU: boolean, list: Promise<any>[]) => {\r\n                if (useWebGPU) {\r\n                    list.push(import(\"../../ShadersWGSL/iblShadowGBufferDebug.fragment\"));\r\n                } else {\r\n                    list.push(import(\"../../Shaders/iblShadowGBufferDebug.fragment\"));\r\n                }\r\n            },\r\n        };\r\n        this._gbufferDebugPass = new PostProcess(\"iblShadowGBufferDebug\", \"iblShadowGBufferDebug\", options);\r\n        this._gbufferDebugPass.autoClear = false;\r\n        this._gbufferDebugPass.onApplyObservable.add((effect) => {\r\n            this._prePassEffectConfiguration.texturesRequired.forEach((type) => {\r\n                const prePassRenderer = this.scene.prePassRenderer;\r\n                if (!prePassRenderer) {\r\n                    Logger.Error(\"Can't enable G-Buffer debug rendering since prepassRenderer doesn't exist.\");\r\n                    return;\r\n                }\r\n                const index = prePassRenderer.getIndex(type);\r\n                if (index >= 0) effect.setTexture(PrePassRenderer.TextureFormats[type].name, prePassRenderer.getRenderTarget().textures[index]);\r\n            });\r\n            effect.setVector4(\"sizeParams\", this._gBufferDebugSizeParams);\r\n            if (this.scene.activeCamera) {\r\n                effect.setFloat(\"maxDepth\", this.scene.activeCamera.maxZ);\r\n            }\r\n        });\r\n        return this._gbufferDebugPass;\r\n    }\r\n\r\n    private _createDebugPasses() {\r\n        this._debugPasses = [\r\n            { pass: this._importanceSamplingRenderer?.getDebugPassPP(), enabled: this.importanceSamplingDebugEnabled },\r\n            { pass: this._voxelRenderer?.getDebugPassPP(), enabled: this.voxelDebugEnabled },\r\n            { pass: this._voxelTracingPass?.getDebugPassPP(), enabled: this.voxelTracingDebugEnabled },\r\n            { pass: this._spatialBlurPass?.getDebugPassPP(), enabled: this.spatialBlurPassDebugEnabled },\r\n            { pass: this._accumulationPass?.getDebugPassPP(), enabled: this.accumulationPassDebugEnabled },\r\n            { pass: this._getGBufferDebugPass(), enabled: this.gbufferDebugEnabled },\r\n        ];\r\n        for (let i = 0; i < this._debugPasses.length; i++) {\r\n            if (!this._debugPasses[i].pass) continue;\r\n            this.addEffect(\r\n                new PostProcessRenderEffect(\r\n                    this.scene.getEngine(),\r\n                    this._debugPasses[i].pass.name,\r\n                    () => {\r\n                        return this._debugPasses[i].pass;\r\n                    },\r\n                    true\r\n                )\r\n            );\r\n        }\r\n        const cameras = this.cameras.slice();\r\n        this.scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this.name, this.cameras);\r\n        this.scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this.name, cameras);\r\n        for (let i = 0; i < this._debugPasses.length; i++) {\r\n            if (!this._debugPasses[i].pass) continue;\r\n            if (this._debugPasses[i].enabled) {\r\n                this._enableEffect(this._debugPasses[i].pass.name, this.cameras);\r\n            } else {\r\n                this._disableEffect(this._debugPasses[i].pass.name, this.cameras);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _disposeEffectPasses() {\r\n        this.scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this.name, this.cameras);\r\n        this._disableEffect(\"IBLShadowVoxelTracingPass\", this.cameras);\r\n        this._disableEffect(\"IBLShadowSpatialBlurPass\", this.cameras);\r\n        this._disableEffect(\"IBLShadowAccumulationBlurPass\", this.cameras);\r\n        this._disableEffect(\"IBLShadowCompositePass\", this.cameras);\r\n        this._disposeDebugPasses();\r\n        this._reset();\r\n    }\r\n\r\n    private _disposeDebugPasses() {\r\n        for (let i = 0; i < this._debugPasses.length; i++) {\r\n            this._disableEffect(this._debugPasses[i].pass.name, this.cameras);\r\n            this._debugPasses[i].pass.dispose();\r\n        }\r\n        this._debugPasses = [];\r\n    }\r\n\r\n    private _updateDebugPasses() {\r\n        let count = 0;\r\n        if (this._gbufferDebugEnabled) count++;\r\n        if (this.importanceSamplingDebugEnabled) count++;\r\n        if (this.voxelDebugEnabled) count++;\r\n        if (this.voxelTracingDebugEnabled) count++;\r\n        if (this.spatialBlurPassDebugEnabled) count++;\r\n        if (this.accumulationPassDebugEnabled) count++;\r\n\r\n        const rows = Math.ceil(Math.sqrt(count));\r\n        const cols = Math.ceil(count / rows);\r\n        const width = 1.0 / cols;\r\n        const height = 1.0 / rows;\r\n        let x = 0;\r\n        let y = 0;\r\n        if (this.gbufferDebugEnabled) {\r\n            const prePassRenderer = this.scene!.prePassRenderer;\r\n            if (!prePassRenderer) {\r\n                Logger.Error(\"Can't enable G-Buffer debug rendering since prepassRenderer doesn't exist.\");\r\n                return;\r\n            }\r\n            this._gBufferDebugSizeParams.set(x, y, cols, rows);\r\n            x -= width;\r\n            if (x <= -1) {\r\n                x = 0;\r\n                y -= height;\r\n            }\r\n        }\r\n\r\n        if (this.importanceSamplingDebugEnabled) {\r\n            this._importanceSamplingRenderer.setDebugDisplayParams(x, y, cols, rows);\r\n            x -= width;\r\n            if (x <= -1) {\r\n                x = 0;\r\n                y -= height;\r\n            }\r\n        }\r\n        if (this.voxelDebugEnabled) {\r\n            this._voxelRenderer.setDebugDisplayParams(x, y, cols, rows);\r\n            x -= width;\r\n            if (x <= -1) {\r\n                x = 0;\r\n                y -= height;\r\n            }\r\n        }\r\n        if (this.voxelTracingDebugEnabled) {\r\n            this._voxelTracingPass.setDebugDisplayParams(x, y, cols, rows);\r\n            x -= width;\r\n            if (x <= -1) {\r\n                x = 0;\r\n                y -= height;\r\n            }\r\n        }\r\n        if (this.spatialBlurPassDebugEnabled) {\r\n            this._spatialBlurPass.setDebugDisplayParams(x, y, cols, rows);\r\n            x -= width;\r\n            if (x <= -1) {\r\n                x = 0;\r\n                y -= height;\r\n            }\r\n        }\r\n        if (this.accumulationPassDebugEnabled) {\r\n            this._accumulationPass.setDebugDisplayParams(x, y, cols, rows);\r\n            x -= width;\r\n            if (x <= -1) {\r\n                x = 0;\r\n                y -= height;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger the scene to be re-voxelized. This is useful when the scene has changed and the voxel grid needs to be updated.\r\n     */\r\n    public updateVoxelization() {\r\n        this._voxelizationDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Trigger the scene bounds of shadow-casters to be updated. This is useful when the scene has changed and the bounds need\r\n     * to be recalculated. This will also trigger a re-voxelization.\r\n     */\r\n    public updateSceneBounds() {\r\n        this._voxelizationDirty = true;\r\n        this._boundsNeedUpdate = true;\r\n    }\r\n\r\n    private _updateBeforeRender() {\r\n        this._updateDebugPasses();\r\n    }\r\n\r\n    private _listenForCameraChanges() {\r\n        // We want to listen for camera changes and change settings while the camera is moving.\r\n        if (this.scene.activeCamera instanceof ArcRotateCamera) {\r\n            this.scene.onBeforeCameraRenderObservable.add((camera) => {\r\n                let isMoving: boolean = false;\r\n                if (camera instanceof ArcRotateCamera) {\r\n                    isMoving =\r\n                        camera.inertialAlphaOffset !== 0 ||\r\n                        camera.inertialBetaOffset !== 0 ||\r\n                        camera.inertialRadiusOffset !== 0 ||\r\n                        camera.inertialPanningX !== 0 ||\r\n                        camera.inertialPanningY !== 0;\r\n                } else if (camera instanceof FreeCamera) {\r\n                    isMoving =\r\n                        camera.cameraDirection.x !== 0 ||\r\n                        camera.cameraDirection.y !== 0 ||\r\n                        camera.cameraDirection.z !== 0 ||\r\n                        camera.cameraRotation.x !== 0 ||\r\n                        camera.cameraRotation.y !== 0;\r\n                }\r\n                if (this._accumulationPass) {\r\n                    if (isMoving) {\r\n                        // this._accumulationPass.reset = true;\r\n                        // this._accumulationPass.remenance = 1.0;\r\n                    } else {\r\n                        // this._accumulationPass.reset = false;\r\n                        // this._accumulationPass.remenance = 0.9;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Links to the prepass renderer\r\n     * @param prePassRenderer The scene PrePassRenderer\r\n     * @returns true if the pre pass is setup\r\n     */\r\n    public override setPrePassRenderer(prePassRenderer: PrePassRenderer): boolean {\r\n        return !!prePassRenderer.addEffectConfiguration(this._prePassEffectConfiguration);\r\n    }\r\n\r\n    /**\r\n     * Checks if the IBL shadow pipeline is ready to render shadows\r\n     * @returns true if the IBL shadow pipeline is ready to render the shadows\r\n     */\r\n    public isReady() {\r\n        return (\r\n            this._noiseTexture.isReady() &&\r\n            this._voxelRenderer.isReady() &&\r\n            this._importanceSamplingRenderer.isReady() &&\r\n            (!this._voxelTracingPass || this._voxelTracingPass.isReady()) &&\r\n            (!this._spatialBlurPass || this._spatialBlurPass.isReady()) &&\r\n            (!this._accumulationPass || this._accumulationPass.isReady())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders accumulated shadows for IBL\r\n     */\r\n    public update() {\r\n        // This is called for every MRT in the customRenderTargets structure during voxelization. That doesn't make\r\n        // sense. We only want this to run after voxelization so we should put in some state logic here to return\r\n        // if voxelization is happening.\r\n        if (this._voxelRenderer.isVoxelizationInProgress()) {\r\n            return;\r\n        }\r\n\r\n        if (this._boundsNeedUpdate) {\r\n            const bounds = this.scene.getWorldExtends((mesh) => {\r\n                return mesh instanceof Mesh && this._excludedMeshes.indexOf(mesh.uniqueId) === -1;\r\n            });\r\n            const size = bounds.max.subtract(bounds.min);\r\n            this.voxelGridSize = Math.max(size.x, Math.max(size.y, size.z));\r\n            if (!isFinite(this.voxelGridSize) || this.voxelGridSize === 0) {\r\n                Logger.Warn(\"IBL Shadows: Scene size is invalid. Can't update bounds.\");\r\n                this._boundsNeedUpdate = false;\r\n                this.voxelGridSize = 1.0;\r\n                return;\r\n            }\r\n            const halfSize = this.voxelGridSize / 2.0;\r\n            const centre = bounds.max.add(bounds.min).multiplyByFloats(-0.5, -0.5, -0.5);\r\n            const invWorldScaleMatrix = Matrix.Compose(new Vector3(1.0 / halfSize, 1.0 / halfSize, 1.0 / halfSize), new Quaternion(), new Vector3(0, 0, 0));\r\n            const invTranslationMatrix = Matrix.Compose(new Vector3(1.0, 1.0, 1.0), new Quaternion(), centre);\r\n            invTranslationMatrix.multiplyToRef(invWorldScaleMatrix, invWorldScaleMatrix);\r\n            this._voxelTracingPass?.setWorldScaleMatrix(invWorldScaleMatrix);\r\n            this._voxelRenderer.setWorldScaleMatrix(invWorldScaleMatrix);\r\n            // Set world scale for spatial blur.\r\n            this._spatialBlurPass?.setWorldScale(halfSize * 2.0);\r\n            this._boundsNeedUpdate = false;\r\n            // Logger.Log(\"IBL Shadows: Scene size: \" + size);\r\n            // Logger.Log(\"Half size: \" + halfSize);\r\n            // Logger.Log(\"Centre translation: \" + centre);\r\n\r\n            // Update the SS shadow max distance based on the voxel grid size and resolution.\r\n            // The max distance should be just a little larger than the world size of a single voxel.\r\n            this.ssShadowMaxDist = (1.1 * this.voxelGridSize) / (1 << this.resolutionExp);\r\n        }\r\n\r\n        // If update is needed, render voxels\r\n        if (this._voxelizationDirty) {\r\n            this._voxelRenderer.updateVoxelGrid(this._excludedMeshes);\r\n            this._voxelizationDirty = false;\r\n            // Update the SS shadow max distance based on the voxel grid size and resolution.\r\n            // The max distance should be just a little larger than the world size of a single voxel.\r\n            this.ssShadowMaxDist = (1.1 * this.voxelGridSize) / (1 << this.resolutionExp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"IBLShadowsRenderPipeline\"\r\n     */\r\n    public override getClassName(): string {\r\n        return \"IBLShadowsRenderPipeline\";\r\n    }\r\n\r\n    /**\r\n     * Disposes the IBL shadow pipeline and associated resources\r\n     */\r\n    public override dispose() {\r\n        this._disposeEffectPasses();\r\n        this._noiseTexture.dispose();\r\n        this._voxelRenderer.dispose();\r\n        this._importanceSamplingRenderer.dispose();\r\n        this._voxelTracingPass?.dispose();\r\n        this._spatialBlurPass?.dispose();\r\n        this._accumulationPass?.dispose();\r\n        super.dispose();\r\n    }\r\n}\r\n"]}
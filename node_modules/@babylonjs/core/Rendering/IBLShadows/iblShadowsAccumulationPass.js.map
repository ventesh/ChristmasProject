{"version":3,"file":"iblShadowsAccumulationPass.js","sourceRoot":"","sources":["../../../../../dev/core/src/Rendering/IBLShadows/iblShadowsAccumulationPass.ts"],"names":[],"mappings":"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","sourcesContent":["import { Constants } from \"../../Engines/constants\";\r\nimport type { AbstractEngine } from \"../../Engines/abstractEngine\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector4 } from \"../../Maths/math.vector\";\r\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\r\nimport type { PostProcessOptions } from \"../../PostProcesses/postProcess\";\r\nimport type { Effect } from \"../../Materials/effect\";\r\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\nimport type { RenderTargetCreationOptions } from \"../../Materials/Textures/textureCreationOptions\";\r\nimport { ShaderLanguage } from \"core/Materials/shaderLanguage\";\r\n\r\n/**\r\n * This should not be instanciated directly, as it is part of a scene component\r\n * @internal\r\n */\r\nexport class _IblShadowsAccumulationPass {\r\n    private _scene: Scene;\r\n    private _engine: AbstractEngine;\r\n\r\n    // First, render the accumulation pass with both position buffers, motion buffer, shadow buffer, and the previous accumulation buffer\r\n    private _outputPP: PostProcess;\r\n    private _oldAccumulationRT: RenderTargetTexture;\r\n    private _oldLocalPositionRT: RenderTargetTexture;\r\n\r\n    /** Enable the debug view for this pass */\r\n    public debugEnabled: boolean = false;\r\n\r\n    /**\r\n     * Gets the pass post process\r\n     * @returns The post process\r\n     */\r\n    public getPassPP(): PostProcess {\r\n        return this._outputPP;\r\n    }\r\n\r\n    /**\r\n     * Gets the debug pass post process\r\n     * @returns The post process\r\n     */\r\n    public getDebugPassPP(): PostProcess {\r\n        if (!this._debugPassPP) {\r\n            this._createDebugPass();\r\n        }\r\n        return this._debugPassPP;\r\n    }\r\n\r\n    private _debugPassName: string = \"Shadow Accumulation Debug Pass\";\r\n\r\n    /**\r\n     * Gets the name of the debug pass\r\n     * @returns The name of the debug pass\r\n     */\r\n    public get debugPassName(): string {\r\n        return this._debugPassName;\r\n    }\r\n\r\n    /**\r\n     * A value that controls how much of the previous frame's accumulation to keep.\r\n     * The higher the value, the faster the shadows accumulate but the more potential ghosting you'll see.\r\n     */\r\n    public get remenance(): number {\r\n        return this._remenance;\r\n    }\r\n\r\n    /**\r\n     * A value that controls how much of the previous frame's accumulation to keep.\r\n     * The higher the value, the faster the shadows accumulate but the more potential ghosting you'll see.\r\n     */\r\n    public set remenance(value: number) {\r\n        this._remenance = value;\r\n    }\r\n    private _remenance: number = 0.9;\r\n\r\n    /**\r\n     * Reset the accumulation.\r\n     */\r\n    public get reset(): boolean {\r\n        return this._reset;\r\n    }\r\n    /**\r\n     * Reset the accumulation.\r\n     */\r\n    public set reset(value: boolean) {\r\n        this._reset = value;\r\n    }\r\n    private _reset: boolean = true;\r\n    private _debugPassPP: PostProcess;\r\n    private _debugSizeParams: Vector4 = new Vector4(0.0, 0.0, 0.0, 0.0);\r\n\r\n    /**\r\n     * Sets params that control the position and scaling of the debug display on the screen.\r\n     * @param x Screen X offset of the debug display (0-1)\r\n     * @param y Screen Y offset of the debug display (0-1)\r\n     * @param widthScale X scale of the debug display (0-1)\r\n     * @param heightScale Y scale of the debug display (0-1)\r\n     */\r\n    public setDebugDisplayParams(x: number, y: number, widthScale: number, heightScale: number) {\r\n        this._debugSizeParams.set(x, y, widthScale, heightScale);\r\n    }\r\n\r\n    /**\r\n     * Creates the debug post process effect for this pass\r\n     */\r\n    private _createDebugPass() {\r\n        if (!this._debugPassPP) {\r\n            const isWebGPU = this._engine.isWebGPU;\r\n            const debugOptions: PostProcessOptions = {\r\n                width: this._engine.getRenderWidth(),\r\n                height: this._engine.getRenderHeight(),\r\n                textureFormat: Constants.TEXTUREFORMAT_RG,\r\n                textureType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n                samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                uniforms: [\"sizeParams\"],\r\n                samplers: [\"debugSampler\"],\r\n                engine: this._engine,\r\n                reusable: false,\r\n                shaderLanguage: isWebGPU ? ShaderLanguage.WGSL : ShaderLanguage.GLSL,\r\n                extraInitializations: (useWebGPU: boolean, list: Promise<any>[]) => {\r\n                    if (useWebGPU) {\r\n                        list.push(import(\"../../ShadersWGSL/iblShadowDebug.fragment\"));\r\n                    } else {\r\n                        list.push(import(\"../../Shaders/iblShadowDebug.fragment\"));\r\n                    }\r\n                },\r\n            };\r\n            this._debugPassPP = new PostProcess(this.debugPassName, \"iblShadowDebug\", debugOptions);\r\n            this._debugPassPP.autoClear = false;\r\n            this._debugPassPP.onApplyObservable.add((effect) => {\r\n                // update the caustic texture with what we just rendered.\r\n                effect.setTextureFromPostProcessOutput(\"debugSampler\", this._outputPP);\r\n                effect.setVector4(\"sizeParams\", this._debugSizeParams);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates the accumulation pass\r\n     * @param scene Scene to attach to\r\n     * @returns The accumulation pass\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n        this._createTextures();\r\n    }\r\n\r\n    private _createTextures() {\r\n        const isWebGPU = this._engine.isWebGPU;\r\n        // Create the local position texture for the previous frame.\r\n        // We'll copy the previous local position texture to this texture at the start of every frame.\r\n        const localPositionOptions: RenderTargetCreationOptions = {\r\n            generateDepthBuffer: false,\r\n            generateMipMaps: false,\r\n            format: Constants.TEXTUREFORMAT_RGBA,\r\n            type: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            samplingMode: Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n        };\r\n\r\n        this._oldLocalPositionRT = new RenderTargetTexture(\r\n            \"oldLocalPositionRT\",\r\n            { width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() },\r\n            this._scene,\r\n            localPositionOptions\r\n        );\r\n\r\n        const localPositionCopyOptions: PostProcessOptions = {\r\n            width: this._engine.getRenderWidth(),\r\n            height: this._engine.getRenderHeight(),\r\n            textureFormat: Constants.TEXTUREFORMAT_RGBA,\r\n            textureType: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n            engine: this._engine,\r\n            reusable: false,\r\n            defines: \"#define PASS_SAMPLER sampler\",\r\n            shaderLanguage: isWebGPU ? ShaderLanguage.WGSL : ShaderLanguage.GLSL,\r\n            extraInitializations: (useWebGPU: boolean, list: Promise<any>[]) => {\r\n                if (useWebGPU) {\r\n                    list.push(import(\"../../ShadersWGSL/pass.fragment\"));\r\n                } else {\r\n                    list.push(import(\"../../Shaders/pass.fragment\"));\r\n                }\r\n            },\r\n        };\r\n        const localPositionCopyPP = new PostProcess(\"Copy Local Position Texture\", \"pass\", localPositionCopyOptions);\r\n        localPositionCopyPP.autoClear = false;\r\n        localPositionCopyPP.onApplyObservable.add((effect) => {\r\n            const prePassRenderer = this._scene!.prePassRenderer;\r\n            const index = prePassRenderer!.getIndex(Constants.PREPASS_POSITION_TEXTURE_TYPE);\r\n            if (index >= 0) effect.setTexture(\"textureSampler\", prePassRenderer!.getRenderTarget().textures[index]);\r\n        });\r\n        this._oldLocalPositionRT.addPostProcess(localPositionCopyPP);\r\n        this._oldLocalPositionRT.skipInitialClear = true;\r\n        this._oldLocalPositionRT.noPrePassRenderer = true;\r\n\r\n        this._scene.customRenderTargets.push(this._oldLocalPositionRT);\r\n\r\n        // Create the accumulation texture for the previous frame.\r\n        // We'll copy the output of the accumulation pass to this texture at the start of every frame.\r\n        const accumulationOptions: RenderTargetCreationOptions = {\r\n            generateDepthBuffer: false,\r\n            generateMipMaps: false,\r\n            format: Constants.TEXTUREFORMAT_RG,\r\n            type: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n        };\r\n\r\n        this._oldAccumulationRT = new RenderTargetTexture(\r\n            \"oldAccumulationRT\",\r\n            { width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() },\r\n            this._scene,\r\n            accumulationOptions\r\n        );\r\n        const accumulationCopyOptions: PostProcessOptions = {\r\n            width: this._engine.getRenderWidth(),\r\n            height: this._engine.getRenderHeight(),\r\n            textureFormat: Constants.TEXTUREFORMAT_RG,\r\n            textureType: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n            engine: this._engine,\r\n            reusable: false,\r\n            defines: \"#define PASS_SAMPLER sampler\",\r\n            shaderLanguage: isWebGPU ? ShaderLanguage.WGSL : ShaderLanguage.GLSL,\r\n            extraInitializations: (useWebGPU: boolean, list: Promise<any>[]) => {\r\n                if (useWebGPU) {\r\n                    list.push(import(\"../../ShadersWGSL/pass.fragment\"));\r\n                } else {\r\n                    list.push(import(\"../../Shaders/pass.fragment\"));\r\n                }\r\n            },\r\n        };\r\n        const accumulationCopyPP = new PostProcess(\"Copy Accumulation Texture\", \"pass\", accumulationCopyOptions);\r\n        accumulationCopyPP.autoClear = false;\r\n        accumulationCopyPP.onApplyObservable.add((effect) => {\r\n            if (this._outputPP._outputTexture?.texture) {\r\n                effect.setTextureFromPostProcessOutput(\"textureSampler\", this._outputPP);\r\n            } else {\r\n                // We must set a texture. It's not the right one, but we must set something before the right one is available (see above), probably on next frame.\r\n                effect._bindTexture(\"textureSampler\", this._outputPP.inputTexture.texture);\r\n            }\r\n        });\r\n        this._oldAccumulationRT.addPostProcess(accumulationCopyPP);\r\n        this._oldAccumulationRT.skipInitialClear = true;\r\n        this._oldAccumulationRT.noPrePassRenderer = true;\r\n        this._scene.customRenderTargets.push(this._oldAccumulationRT);\r\n\r\n        // Now, create the accumulation pass\r\n        const ppOptions: PostProcessOptions = {\r\n            width: this._engine.getRenderWidth(),\r\n            height: this._engine.getRenderHeight(),\r\n            textureFormat: Constants.TEXTUREFORMAT_RG,\r\n            textureType: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n            uniforms: [\"accumulationParameters\"],\r\n            samplers: [\"oldAccumulationSampler\", \"prevLocalPositionSampler\", \"localPositionSampler\", \"motionSampler\"],\r\n            engine: this._engine,\r\n            reusable: false,\r\n            shaderLanguage: isWebGPU ? ShaderLanguage.WGSL : ShaderLanguage.GLSL,\r\n            extraInitializations: (useWebGPU: boolean, list: Promise<any>[]) => {\r\n                if (useWebGPU) {\r\n                    list.push(import(\"../../ShadersWGSL/iblShadowAccumulation.fragment\"));\r\n                } else {\r\n                    list.push(import(\"../../Shaders/iblShadowAccumulation.fragment\"));\r\n                }\r\n            },\r\n        };\r\n        this._outputPP = new PostProcess(\"accumulationPassPP\", \"iblShadowAccumulation\", ppOptions);\r\n        this._outputPP.autoClear = false;\r\n        this._outputPP.resize(this._engine.getRenderWidth(), this._engine.getRenderHeight()); // make sure that _outputPP.inputTexture.texture is created right away\r\n        this._outputPP.onApplyObservable.add((effect) => {\r\n            this._updatePostProcess(effect);\r\n        });\r\n    }\r\n\r\n    public _updatePostProcess(effect: Effect) {\r\n        effect.setVector4(\"accumulationParameters\", new Vector4(this.remenance, this.reset ? 1.0 : 0.0, 0.0, 0.0));\r\n        effect.setTexture(\"oldAccumulationSampler\", this._oldAccumulationRT);\r\n        effect.setTexture(\"prevLocalPositionSampler\", this._oldLocalPositionRT);\r\n\r\n        const prePassRenderer = this._scene.prePassRenderer;\r\n        if (prePassRenderer) {\r\n            const localPositionIndex = prePassRenderer.getIndex(Constants.PREPASS_POSITION_TEXTURE_TYPE);\r\n            if (localPositionIndex >= 0) effect.setTexture(\"localPositionSampler\", prePassRenderer.getRenderTarget().textures[localPositionIndex]);\r\n            const velocityIndex = prePassRenderer.getIndex(Constants.PREPASS_VELOCITY_LINEAR_TEXTURE_TYPE);\r\n            if (velocityIndex >= 0) effect.setTexture(\"motionSampler\", prePassRenderer.getRenderTarget().textures[velocityIndex]);\r\n        }\r\n\r\n        this.reset = false;\r\n    }\r\n\r\n    /** Called by render pipeline when canvas resized. */\r\n    public resize() {\r\n        this._oldAccumulationRT.resize({ width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() });\r\n        this._oldLocalPositionRT.resize({ width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() });\r\n    }\r\n\r\n    private _disposeTextures() {\r\n        this._oldAccumulationRT.dispose();\r\n        this._oldLocalPositionRT.dispose();\r\n    }\r\n\r\n    /**\r\n     * Checks if the pass is ready\r\n     * @returns true if the pass is ready\r\n     */\r\n    public isReady() {\r\n        return (\r\n            this._oldAccumulationRT &&\r\n            this._oldAccumulationRT.isReadyForRendering() &&\r\n            this._oldLocalPositionRT &&\r\n            this._oldLocalPositionRT.isReadyForRendering() &&\r\n            this._outputPP.isReady() &&\r\n            !(this._debugPassPP && !this._debugPassPP.isReady())\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Disposes the associated resources\r\n     */\r\n    public dispose() {\r\n        this._disposeTextures();\r\n        this._outputPP.dispose();\r\n        if (this._debugPassPP) {\r\n            this._debugPassPP.dispose();\r\n        }\r\n    }\r\n}\r\n"]}
{"version":3,"file":"abstractMesh.hotSpot.js","sourceRoot":"","sources":["../../../../dev/core/src/Meshes/abstractMesh.hotSpot.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector3, TmpVectors, Matrix } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"./abstractMesh\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\n\r\n/**\r\n * Data for mesh hotspot computation\r\n */\r\nexport type HotSpotQuery = {\r\n    /**\r\n     * 3 point indices\r\n     */\r\n    pointIndex: [number, number, number];\r\n    /**\r\n     * 3 barycentric coordinates\r\n     */\r\n    barycentric: [number, number, number];\r\n};\r\n\r\n/**\r\n * Return a transformed local position from a mesh and vertex index\r\n * @param mesh mesh used to get vertex array from\r\n * @param index vertex index\r\n * @param res resulting local position\r\n * @returns false if it was not possible to compute the position for that vertex\r\n */\r\nexport function GetTransformedPosition(mesh: AbstractMesh, index: number, res: Vector3): boolean {\r\n    const data = mesh.getVerticesData(VertexBuffer.PositionKind);\r\n    if (!data) {\r\n        return false;\r\n    }\r\n    const base = index * 3;\r\n    const values = [data[base + 0], data[base + 1], data[base + 2]];\r\n    if (mesh.morphTargetManager) {\r\n        for (let component = 0; component < 3; component++) {\r\n            let value = values[component];\r\n            for (let targetCount = 0; targetCount < mesh.morphTargetManager.numTargets; targetCount++) {\r\n                const target = mesh.morphTargetManager.getTarget(targetCount);\r\n                const influence = target.influence;\r\n                if (influence !== 0) {\r\n                    const targetData = target.getPositions();\r\n                    if (targetData) {\r\n                        value += (targetData[base + component] - data[base + component]) * influence;\r\n                    }\r\n                }\r\n            }\r\n            values[component] = value;\r\n        }\r\n    }\r\n    res.fromArray(values);\r\n    if (mesh.skeleton) {\r\n        const matricesIndicesData = mesh.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n        const matricesWeightsData = mesh.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n        if (matricesWeightsData && matricesIndicesData) {\r\n            const needExtras = mesh.numBoneInfluencers > 4;\r\n            const matricesIndicesExtraData = needExtras ? mesh.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\r\n            const matricesWeightsExtraData = needExtras ? mesh.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\r\n            const skeletonMatrices = mesh.skeleton.getTransformMatrices(mesh);\r\n\r\n            const finalMatrix = TmpVectors.Matrix[0];\r\n            const tempMatrix = TmpVectors.Matrix[1];\r\n\r\n            finalMatrix.reset();\r\n            const matWeightIdx = index * 4;\r\n\r\n            let inf: number;\r\n            let weight: number;\r\n            for (inf = 0; inf < 4; inf++) {\r\n                weight = matricesWeightsData[matWeightIdx + inf];\r\n                if (weight > 0) {\r\n                    Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                    finalMatrix.addToSelf(tempMatrix);\r\n                }\r\n            }\r\n            if (matricesIndicesExtraData && matricesWeightsExtraData) {\r\n                for (inf = 0; inf < 4; inf++) {\r\n                    weight = matricesWeightsExtraData[matWeightIdx + inf];\r\n                    if (weight > 0) {\r\n                        Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData[matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                        finalMatrix.addToSelf(tempMatrix);\r\n                    }\r\n                }\r\n            }\r\n\r\n            Vector3.TransformCoordinatesFromFloatsToRef(values[0], values[1], values[2], finalMatrix, res);\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Compute a world space hotspot position\r\n * @param mesh mesh used to get hotspot from\r\n * @param hotSpotQuery point indices and barycentric\r\n * @param res output world position\r\n */\r\nexport function GetHotSpotToRef(mesh: AbstractMesh, hotSpotQuery: HotSpotQuery, res: Vector3): void {\r\n    res.set(0, 0, 0);\r\n    for (let i = 0; i < 3; i++) {\r\n        const index = hotSpotQuery.pointIndex[i];\r\n        GetTransformedPosition(mesh, index, TmpVectors.Vector3[0]);\r\n        TmpVectors.Vector3[0].scaleInPlace(hotSpotQuery.barycentric[i]);\r\n        res.addInPlace(TmpVectors.Vector3[0]);\r\n    }\r\n}\r\n"]}